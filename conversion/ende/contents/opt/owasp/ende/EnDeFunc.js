// @(#) EnDeFunc.js 3.6 ; generated by EnDe2js.pl 3.17  from: aes.js 3.6 12/06/03 12:54:55
/*
 * parameters named _n1_, _n2_, .. _n7_ are unused parameters for that function
 */
if (typeof(EnDe)==='undefined') { EnDe = new function() {}; }
EnDe.Func.AES   = new function() {
	this.SID    = '3.6';
	this.list   = {
 
  EN: {
 aes   :	[EnDe.AES.EN.aes	(key,	s,	n), aes128:	[EnDe.AES.EN.aes128	(key,	 s), aes192:	[EnDe.AES.EN.aes192	(key,	 s), aes256:	[EnDe.AES.EN.aes256	(key,	 s),	'dumm':'dumm'},

  DE: {
 aes   :	[EnDe.AES.DE.aes	(key,	s,	n), aes128:	[EnDe.AES.DE.aes128	(key,	 s), aes192:	[EnDe.AES.DE.aes192	(key,	 s), aes265:	[EnDe.AES.DE.aes265	(key,	 s),	'dumm':'dumm'},
	'dumm':'dumm'},
  desc: '8'
	}; // .list
};
// @(#) EnDeFunc.js 3.1 ; generated by EnDe2js.pl 3.17  from: blowfish.js 3.1 12/06/05 00:01:51
/*
 * parameters named _n1_, _n2_, .. _n7_ are unused parameters for that function
 */
if (typeof(EnDe)==='undefined') { EnDe = new function() {}; }
EnDe.Func.Blowfish   = new function() {
	this.SID    = '3.1';
	this.list   = {
 	encrypt    :	[EnDe.Blowfish.encrypt	(key,	src),	decrypt    :	[EnDe.Blowfish.decrypt	(key,	src),
  EN: {
		blowfish   :	[EnDe.Blowfish.EN.blowfish	(key,	src),	'dumm':'dumm'},

  DE: {
		blowfish   :	[EnDe.Blowfish.DE.blowfish	(key,	src),	'dumm':'dumm'},
	escape:	[EnDe.Blowfish.escape	(t),	wordbyte0:	[EnDe.Blowfish.wordbyte0	(w),	wordbyte1:	[EnDe.Blowfish.wordbyte1	(w),	wordbyte2:	[EnDe.Blowfish.wordbyte2	(w),	wordbyte3:	[EnDe.Blowfish.wordbyte3	(w),	xor:	[EnDe.Blowfish.xor	(w1,	w2),	unescape:	[EnDe.Blowfish.unescape	(t),	'dumm':'dumm'},
  desc: '19'
	}; // .list
};
// @(#) EnDeFunc.js 3.5 ; generated by EnDe2js.pl 3.17  from: crc.js 3.5 12/06/02 17:33:14
/*
 * parameters named _n1_, _n2_, .. _n7_ are unused parameters for that function
 */
if (typeof(EnDe)==='undefined') { EnDe = new function() {}; }
EnDe.Func.CRC   = new function() {
	this.SID    = '3.5';
	this.list   = {
     reflectByte  :	[EnDe.CRC.reflectByte	(src),	'reflect one byte'],
    reflect  :	[EnDe.CRC.reflect	(src,	bitnum,	startLSB),	'reflect \\'bitnum\\' bits starting at lowest bit = startLSB'],
    c8tab      :	[EnDe.CRC.c8tab	(src,	iv,	mask,	polynomial),	'compute CRC-8 checksum'],
    crc16     :	[EnDe.CRC.crc16	(src,	iv,	mask,	polynomial),	'compute CRC-16 checksum'],
    c16arc   :	[EnDe.CRC.c16arc	(src,	iv,	mask),	'compute CRC-16 checksum using classic table (ARC)'],
    c16ppp   :	[EnDe.CRC.c16ppp	(src,	iv,	mask),	'compute CRC-16 checksum using RFC-1662 table (aka PPP, aka FCS-16)'],
    c16zmo   :	[EnDe.CRC.c16zmo	(src,	iv,	mask),	'compute CRC-16 checksum using ZModem table'],
    c32tab   :	[EnDe.CRC.c32tab	(src,	iv,	mask),	'compute CRC-32 checksum (aka FCS-32)'],
    dispatch :	[EnDe.CRC.dispatch	(type,	src,	iv,	mask,	polynomial),	'wrapper for CRC functions'],
	'dumm':'dumm'},
  desc: '28'
	}; // .list
};
// @(#) EnDeFunc.js 3.3 ; generated by EnDe2js.pl 3.17  from: md4.js 3.3 11/12/30 19:19:20
/*
 * parameters named _n1_, _n2_, .. _n7_ are unused parameters for that function
 */
if (typeof(EnDe)==='undefined') { EnDe = new function() {}; }
EnDe.Func.MD4   = new function() {
	this.SID    = '3.3';
	this.list   = {
 hex_md4 :	[EnDe.MD4.hex_md4	(s),b64_md4 :	[EnDe.MD4.b64_md4	(s),str_md4 :	[EnDe.MD4.str_md4	(s),hex_hmac_md4 :	[EnDe.MD4.hex_hmac_md4	(key,	 s),b64_hmac_md4 :	[EnDe.MD4.b64_hmac_md4	(key,	 s),str_hmac_md4 :	[EnDe.MD4.str_hmac_md4	(key,	 s),    desc:	'MD4'
  }, // MD4
  desc: '34'
	}; // .list
};
// @(#) EnDeFunc.js 3.3 ; generated by EnDe2js.pl 3.17  from: md5.js 3.3 11/12/30 19:13:53
/*
 * parameters named _n1_, _n2_, .. _n7_ are unused parameters for that function
 */
if (typeof(EnDe)==='undefined') { EnDe = new function() {}; }
EnDe.Func.MD5   = new function() {
	this.SID    = '3.3';
	this.list   = {
 hex_md5 :	[EnDe.MD5.hex_md5	(s),b64_md5 :	[EnDe.MD5.b64_md5	(s),str_md5 :	[EnDe.MD5.str_md5	(s),hex_hmac_md5 :	[EnDe.MD5.hex_hmac_md5	(key,	 s),b64_hmac_md5 :	[EnDe.MD5.b64_hmac_md5	(key,	 s),str_hmac_md5 :	[EnDe.MD5.str_hmac_md5	(key,	 s),    desc:	'MD5'
  }, // MD5
  desc: '40'
	}; // .list
};
// @(#) EnDeFunc.js 3.3 ; generated by EnDe2js.pl 3.17  from: rmd.js 3.3 11/12/30 19:14:51
/*
 * parameters named _n1_, _n2_, .. _n7_ are unused parameters for that function
 */
if (typeof(EnDe)==='undefined') { EnDe = new function() {}; }
EnDe.Func.RMD   = new function() {
	this.SID    = '3.3';
	this.list   = {
     word     :	[EnDe.RMD.word	(key,	 src,	 i),    hex      :	[EnDe.RMD.hex	(key,	 src,	 i),	'dumm':'dumm'},
  desc: '42'
	}; // .list
};
// @(#) EnDeFunc.js 3.6 ; generated by EnDe2js.pl 3.17  from: sha.js 3.6 12/06/03 12:22:20
/*
 * parameters named _n1_, _n2_, .. _n7_ are unused parameters for that function
 */
if (typeof(EnDe)==='undefined') { EnDe = new function() {}; }
EnDe.Func.SHA   = new function() {
	this.SID    = '3.6';
	this.list   = {
     safe_add :	[EnDe.SHA.safe_add	(x,	 y),    rol :	[EnDe.SHA.rol	(num,	 cnt),    str2binb :	[EnDe.SHA.str2binb	(str),    binb2str :	[EnDe.SHA.binb2str	(bin),    binb2hex :	[EnDe.SHA.binb2hex	(binarray),    binb2b64 :	[EnDe.SHA.binb2b64	(binarray),
  sha1: {
	ft :	[EnDe.SHA.sha1.ft	(t,	 b,	 c,	 d),	kt :	[EnDe.SHA.sha1.kt	(t),	core :	[EnDe.SHA.sha1.core	(x,	len),	test   :	[EnDe.SHA.sha1.test	(),	hex    :	[EnDe.SHA.sha1.hex	(s),	b64    :	[EnDe.SHA.sha1.b64	(s),	str    :	[EnDe.SHA.sha1.str	(s),
  hmac: {
		hex:	[EnDe.SHA.sha1.hmac.hex	(key,	 s),		b64:	[EnDe.SHA.sha1.hmac.b64	(key,	 s),		str:	[EnDe.SHA.sha1.hmac.str	(key,	 s),		core :	[EnDe.SHA.sha1.hmac.core	(key,	 data),	'dumm':'dumm'},
	'dumm':'dumm'},

  sha2: {
	S      :	[EnDe.SHA.sha2.S	(x,	n),	R      :	[EnDe.SHA.sha2.R	(x,	n),	Ch     :	[EnDe.SHA.sha2.Ch	(x,	y,	z),	Maj    :	[EnDe.SHA.sha2.Maj	(x,	y,	z),	sigma0256  :	[EnDe.SHA.sha2.sigma0256	(x),	sigma1256  :	[EnDe.SHA.sha2.sigma1256	(x),	gamma0256  :	[EnDe.SHA.sha2.gamma0256	(x),	gamma1256  :	[EnDe.SHA.sha2.gamma1256	(x),	sigma0512  :	[EnDe.SHA.sha2.sigma0512	(x),	sigma1512  :	[EnDe.SHA.sha2.sigma1512	(x),	gamma0512  :	[EnDe.SHA.sha2.gamma0512	(x),	gamma1512  :	[EnDe.SHA.sha2.gamma1512	(x),	core256    :	[EnDe.SHA.sha2.core256	(m,	 l),	core512    :	[EnDe.SHA.sha2.core512	(m,	 l),	test256:	[EnDe.SHA.sha2.test256	(),	test   :	[EnDe.SHA.sha2.test	(),	hex    :	[EnDe.SHA.sha2.hex	(s),	b64    :	[EnDe.SHA.sha2.b64	(s),	str    :	[EnDe.SHA.sha2.str	(s),	'dumm':'dumm'},
	'dumm':'dumm'},
  desc: '78'
	}; // .list
};
// @(#) EnDeFunc.js 3.3 ; generated by EnDe2js.pl 3.17  from: sha512.js 3.3 11/12/30 19:12:03
/*
 * parameters named _n1_, _n2_, .. _n7_ are unused parameters for that function
 */
if (typeof(EnDe)==='undefined') { EnDe = new function() {}; }
EnDe.Func.SHA5   = new function() {
	this.SID    = '3.3';
	this.list   = {
  hex_sha :	[EnDe.SHA5. hex_sha	(string,	 variant),	'SHA-384, SHA-512 hash '],
	'dumm':'dumm'},
  desc: '79'
	}; // .list
};
// @(#) EnDeFunc.js 3.1 ; generated by EnDe2js.pl 3.17  from: EnDeB64.js 3.1 12/06/05 00:02:10
/*
 * parameters named _n1_, _n2_, .. _n7_ are unused parameters for that function
 */
if (typeof(EnDe)==='undefined') { EnDe = new function() {}; }
EnDe.Func.B64   = new function() {
	this.SID    = '3.1';
	this.list   = {
 	isB16  :	[EnDe.B64.isB16	(src),	'return true if string consist of base16 characters only'],
	isB26  :	[EnDe.B64.isB26	(src),	'return true if string consist of base64 characters only'],
	isB34  :	[EnDe.B64.isB34	(src),	'return true if string consist of base34 characters only'],
	isB36  :	[EnDe.B64.isB36	(src),	'return true if string consist of base64 characters only'],
	isB52  :	[EnDe.B64.isB52	(src),	'return true if string consist of base64 characters only'],
	isB58  :	[EnDe.B64.isB58	(src),	'return true if string consist of base64 characters only'],
	isB62  :	[EnDe.B64.isB62	(src),	'return true if string consist of base64 characters only'],
	isB32c :	[EnDe.B64.isB32c	(src),	'return true if string consist of Crockford base32 characters only'],
	isB32h :	[EnDe.B64.isB32h	(src),	'return true if string consist of base32hex characters only'],
	isB32z :	[EnDe.B64.isB32z	(src),	'return true if string consist of z-base32 characters only'],
	isB32  :	[EnDe.B64.isB32	(src),	'return true if string consist of base32 characters only'],
	isB64  :	[EnDe.B64.isB64	(src),	'return true if string consist of base64 characters only'],
	isU64  :	[EnDe.B64.isU64	(src),	'return true if string consist of url64 characters only'],
	init     :	[EnDe.B64.init	(),	is   :	[EnDe.B64.is	(type,	src),	'return true if string is of given type'],

  EN: {
	b_N      :	[EnDe.B64.EN.b_N	(type,	src,	linewrap),	'convert plain text to BaseXX encoded text'],
	b_N      :	[EnDe.B64.EN.b_N	('base16',	src,	linewrap),	'base16:   Base16'],
	b_N      :	[EnDe.B64.EN.b_N	('base26',	src,	linewrap),	'base26:   Base26'],
	b_N      :	[EnDe.B64.EN.b_N	('base32',	src,	linewrap),	'base32:   Base32'],
	b_N      :	[EnDe.B64.EN.b_N	('base32c',	src,	linewrap),	'base32c:  Base32 (Crockford alphabet)'],
	b_N      :	[EnDe.B64.EN.b_N	('base32h',	src,	linewrap),	'base32h:  Base32hex'],
	b_N      :	[EnDe.B64.EN.b_N	('base32z',	src,	linewrap),	'base32z:  z-Base32'],
	b_N      :	[EnDe.B64.EN.b_N	('base34',	src,	linewrap),	'base34:   Base34'],
	b_N      :	[EnDe.B64.EN.b_N	('base36',	src,	linewrap),	'base36:   Base36'],
	b_N      :	[EnDe.B64.EN.b_N	('base52',	src,	linewrap),	'base52:   Base52'],
	b_N      :	[EnDe.B64.EN.b_N	('base64',	src,	linewrap),	'base64:   Base64 as in RFC1521, RFC2045, RFC3548, RFC4648'],
	b_N      :	[EnDe.B64.EN.b_N	('base64f',	src,	linewrap),	'base64f:  modified Base64 for filenames, SAP'],
	b_N      :	[EnDe.B64.EN.b_N	('base64p',	src,	linewrap),	'base64p:  modified Base64 for program identifiers (var. 1)'],
	b_N      :	[EnDe.B64.EN.b_N	('base64q',	src,	linewrap),	'base64q:  modified Base64 for program identifiers (var. 2)'],
	b_N      :	[EnDe.B64.EN.b_N	('base64r',	src,	linewrap),	'base64r:  modified Base64 for regular Expressions'],
	b_N      :	[EnDe.B64.EN.b_N	('base64u',	src,	linewrap),	'base64u:  modified Base64 for URL, RFC4648'],
	b_N      :	[EnDe.B64.EN.b_N	('base64x',	src,	linewrap),	'base64x:  modified Base64 for XML name tokens'],
	b_N      :	[EnDe.B64.EN.b_N	('base64y',	src,	linewrap),	'base64y:  modified Base64 for XML identifiers'],
	b_N      :	[EnDe.B64.EN.b_N	('base85',	src,	linewrap),	'base85:   Base85'],
	b_N      :	[EnDe.B64.EN.b_N	('base91',	src,	linewrap),	'base91:   basE91'],
	b_N      :	[EnDe.B64.EN.b_N	('base94',	src,	linewrap),	'base94:   base94'],
	b_N      :	[EnDe.B64.EN.b_N	('base95',	src,	linewrap),	'base95:   base95'],
	b64      :	[EnDe.B64.EN.b64	(src,	linewrap),	'convert plain text to Base64 encoded text'],
	u64      :	[EnDe.B64.EN.u64	(src,	linewrap),	'convert plain text to Url64 encoded text'],
	b62      :	[EnDe.B64.EN.b62	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	linewrap),	'convert plain text to Base62 encoded text'],
	dispatch :	[EnDe.B64.EN.dispatch	(type,	_n2_,	_n3_,	src,	_n5_,	_n6_,	linewrap),	'wrapper for base-XX functions'],
	'dumm':'dumm'},

  DE: {
	b_N    :	[EnDe.B64.DE.b_N	(type,	src),	'convert BaseXX encoded text to plain text'],
	b_N    :	[EnDe.B64.DE.b_N	('base16',	src),	'base16:   Base16'],
	b_N    :	[EnDe.B64.DE.b_N	('base26',	src),	'base26:   Base26'],
	b_N    :	[EnDe.B64.DE.b_N	('base32',	src),	'base32:   Base32'],
	b_N    :	[EnDe.B64.DE.b_N	('base32c',	src),	'base32c:  Base32 (Crockford alphabet)'],
	b_N    :	[EnDe.B64.DE.b_N	('base32h',	src),	'base32h:  Base32hex'],
	b_N    :	[EnDe.B64.DE.b_N	('base32z',	src),	'base32z:  z-Base32'],
	b_N    :	[EnDe.B64.DE.b_N	('base36',	src),	'base36:   Base36'],
	b_N    :	[EnDe.B64.DE.b_N	('base52',	src),	'base52:   Base52'],
	b_N    :	[EnDe.B64.DE.b_N	('base64',	src),	'base64:   Base64 as in RFC1521, RFC2045, RFC3548, RFC4648'],
	b_N    :	[EnDe.B64.DE.b_N	('base64f',	src),	'base64f:  modified Base64 for filenames, SAP'],
	b_N    :	[EnDe.B64.DE.b_N	('base64p',	src),	'base64p:  modified Base64 for program identifiers (var. 1)'],
	b_N    :	[EnDe.B64.DE.b_N	('base64q',	src),	'base64q:  modified Base64 for program identifiers (var. 2)'],
	b_N    :	[EnDe.B64.DE.b_N	('base64r',	src),	'base64r:  modified Base64 for regular Expressions'],
	b_N    :	[EnDe.B64.DE.b_N	('base64u',	src),	'base64u:  modified Base64 for URL, RFC4648'],
	b_N    :	[EnDe.B64.DE.b_N	('base64x',	src),	'base64x:  modified Base64 for XML name tokens'],
	b_N    :	[EnDe.B64.DE.b_N	('base64y',	src),	'base64y:  modified Base64 for XML identifiers'],
	b64    :	[EnDe.B64.DE.b64	(src),	'convert Base64 encoded text to plain text'],
	u64    :	[EnDe.B64.DE.u64	(src),	'convert Url64 encoded text to plain text'],
	dispatch   :	[EnDe.B64.DE.dispatch	(type,	mode,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'wrapper for base-XX functions; mode may be used to allow "Impedanz Mismatch"'],
	dispatch   :	[EnDe.B64.DE.dispatch	(type,	'strict',	_n3_,	src,	_n5_,	_n6_,	_n7_),	'strict:  allow valid chars only and need proper padding'],
	dispatch   :	[EnDe.B64.DE.dispatch	(type,	'lazy',	_n3_,	src,	_n5_,	_n6_,	_n7_),	'lazy:    allow valid chars only but padding is optional'],
	dispatch   :	[EnDe.B64.DE.dispatch	(type,	'verbose',	_n3_,	src,	_n5_,	_n6_,	_n7_),	'verbose: invalid characters are ignored, padding is optional'],
	'dumm':'dumm'},
	'dumm':'dumm'},
  desc: '103'
	}; // .list
};
// @(#) EnDeFunc.js 3.1 ; generated by EnDe2js.pl 3.17  from: EnDeIP.js 3.1 12/06/04 21:21:51
/*
 * parameters named _n1_, _n2_, .. _n7_ are unused parameters for that function
 */
if (typeof(EnDe)==='undefined') { EnDe = new function() {}; }
EnDe.Func.IP   = new function() {
	this.SID    = '3.1';
	this.list   = {
     ip2num   :	[EnDe.IP.ip2num	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'convert dotted quad IP address to integer'],
    ip2big   :	[EnDe.IP.ip2big	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'convert dotted quad IP address to long integer'],
    ip2xeh   :	[EnDe.IP.ip2xeh	(_n1_,	_n2_,	upper,	src,	prefix,	_n6_,	delim),	'convert dotted quad IP address to hex value'],
    ip2hex   :	[EnDe.IP.ip2hex	(type,	mode,	upper,	src,	prefix,	_n6_,	delim),	'convert dotted quad IP address to dotted hex'],
    ip2hex   :	[EnDe.IP.ip2hex	('url',	mode,	upper,	src,	prefix,	_n6_,	delim),	'url: convert dotted quad IP address to dotted url-encoded hex'],
    ip2hex   :	[EnDe.IP.ip2hex	('hex',	mode,	upper,	src,	prefix,	_n6_,	delim),	'hex: convert dotted quad IP address to dotted hex'],
    ip2hex   :	[EnDe.IP.ip2hex	('xeh',	mode,	upper,	src,	prefix,	_n6_,	delim),	'xeh: convert dotted quad IP address to hex value (wrapper for .IP.ip2xeh())'],
    ip2oct   :	[EnDe.IP.ip2oct	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'convert dotted quad IP address to dotted octal'],
    ip2bin   :	[EnDe.IP.ip2bin	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'convert dotted quad IP address to dotted binary'],
    ip2bit   :	[EnDe.IP.ip2bit	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'convert dotted quad IP address to plain binary'],
    ip2ip6   :	[EnDe.IP.ip2ip6	(type,	mode,	upper,	src,	prefix,	_n6_,	delim),	'convert dotted quad IP address to dotted IPv6'],
    ip62ip   :	[EnDe.IP.ip62ip	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'convert dotted IPv6 to dotted quad IP address'],
    bit2ip   :	[EnDe.IP.bit2ip	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'convert binary address to dotted quad IP address'],
    num2ip   :	[EnDe.IP.num2ip	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'convert integer address to dotted quad IP address'],
    big2ip   :	[EnDe.IP.big2ip	(type,	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'convert long integer address to dotted quad IP address'],
    big2ip   :	[EnDe.IP.big2ip	('big2ip',	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'big2ip: convert long (64-bit) integer address to dotted quad IP address'],
    big2ip   :	[EnDe.IP.big2ip	('low2ip',	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'low2ip: convert long (32-bit) integer address to dotted quad IP address'],
    arr2ip   :	[EnDe.IP.arr2ip	(base,	arr,	arrsize,	delim),	'build dotted quad IP from given array; internal function, should not be used in API'],
    xeh2ip   :	[EnDe.IP.xeh2ip	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'convert hex value to dotted quad IP address'],
    hex2ip   :	[EnDe.IP.hex2ip	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'convert Hex address to dotted quad IP address'],
    oct2ip   :	[EnDe.IP.oct2ip	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'convert octal address to dotted quad IP address'],
    bin2ip   :	[EnDe.IP.bin2ip	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'convert binary address to dotted quad IP address'],
    reverse  :	[EnDe.IP.reverse	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'reverse dotted IP address'],

  ipv6: {
	ip2num :	[EnDe.IP.ipv6.ip2num	(type,	mode,	upper,	src,	prefix,	suffix,	delim),	'**not yet implemented**'],
	'dumm':'dumm'},
    dispatch :	[EnDe.IP.dispatch	(type,	mode,	upper,	src,	prefix,	suffix,	delim),	'dispatcher for IP functions'],
	'dumm':'dumm'},
  desc: '123'
	}; // .list
};
// @(#) EnDeFunc.js 3.1 ; generated by EnDe2js.pl 3.17  from: EnDeTS.js 3.1 12/06/04 21:51:41
/*
 * parameters named _n1_, _n2_, .. _n7_ are unused parameters for that function
 */
if (typeof(EnDe)==='undefined') { EnDe = new function() {}; }
EnDe.Func.TS   = new function() {
	this.SID    = '3.1';
	this.list   = {
     u2a  :	[EnDe.TS.u2a	(ts),	'convert Unix to windows ASP.NET (64bit) timestamp; ts have to be in millisecond format'],
    w2a  :	[EnDe.TS.w2a	(ts),	'convert windows TDateTime (32bit) to ASP.NET (64bit) timestamp'],
    d2a  :	[EnDe.TS.d2a	(ts),	'convert DOS (32bit) to ASP.NET (64bit) timestamp'],
    o2a  :	[EnDe.TS.o2a	(ts),	'convert OLE to ASP.NET (64bit) timestamp'],
    a2u  :	[EnDe.TS.a2u	(ts),	'convert windows ASP.NET (64bit) to Unix timestamp; ts returned in millisecond format'],
    a2d  :	[EnDe.TS.a2d	(ts),	'convert windows ASP.NET (64bit) to DOS (32bit) timestamp'],
    a2o  :	[EnDe.TS.a2o	(ts),	'convert windows ASP.NET (64bit) to OLE timestamp'],
    a2w  :	[EnDe.TS.a2w	(ts),	'convert windows ASP.NET (64bit) to TDateTime (32bit) timestamp'],
    w2u  :	[EnDe.TS.w2u	(ts),	'convert windows TDateTime (32bit) to Unix timestamp; ts returned in millisecond format'],
    u2w  :	[EnDe.TS.u2w	(ts),	'convert Unix to windows TDateTime (32bit) timestamp; ts have to be in millisecond format'],
    matchTime :	[EnDe.TS.matchTime	(_n1_,	_n2_,	year2digits,	strict,	now,	src),	'try to match a time value'],
    matchOffset :	[EnDe.TS.matchOffset	(_n1_,	_n2_,	year2digits,	strict,	now,	src),	'check if value is a timestamp offset'],
    matchDateTime :	[EnDe.TS.matchDateTime	(_n1_,	_n2_,	year2digits,	strict,	now,	src),	'try to match a date/time value'],
    joinTime :	[EnDe.TS.joinTime	(hor),	'return human readable time h:m:s'],
    joinEmit :	[EnDe.TS.joinEmit	(hor),	'return human readable time s:m:h'],
    joinDate :	[EnDe.TS.joinDate	(hor),	'return human readable date Y/M/D'],
    joinEtad :	[EnDe.TS.joinEtad	(hor),	'return human readable date D/M/Y'],
    guessInt :	[EnDe.TS.guessInt	(src),	'guess time ..'],
    guessOffset:	[EnDe.TS.guessOffset	(src),	'guess time offset'],
    guess    :	[EnDe.TS.guess	(src),	'guess date/time ..'],
	'dumm':'dumm'},
  desc: '143'
	}; // .list
};
// @(#) EnDeFunc.js 1.7 ; generated by EnDe2js.pl 3.17  from: EnDeHTTP.js 1.7 12/05/29 22:13:54
/*
 * parameters named _n1_, _n2_, .. _n7_ are unused parameters for that function
 */
if (typeof(EnDe)==='undefined') { EnDe = new function() {}; }
EnDe.Func.HTTP   = new function() {
	this.SID    = '1.7';
	this.list   = {
 
  headers: {
	'dumm':'dumm'},
    str_index    :	[EnDe.HTTP.str_index	(idx,	src),	'return end of string starting at position idx \\'til next occourance of character found at idx'],
    str_scope    :	[EnDe.HTTP.str_scope	(idx,	src),	'return end of string starting at position idx \\'til next occourance proper closing bracket'],
    str_split    :	[EnDe.HTTP.str_split	(typ,	src),	'split src on separator typ, return array'],
    parse    :	[EnDe.HTTP.parse	(typ,	src),	'dispatcher for parsing QUERY string, POST data, etc., returns array'],
    parse    :	[EnDe.HTTP.parse	('GET',	src),	'GET:  assume search part of URL, split on &'],
    parse    :	[EnDe.HTTP.parse	('POST',	src),	'POST: assume POST request: split on &'],
    parse    :	[EnDe.HTTP.parse	('mult',	src),	'mult: assume POST request: split on boundary'],
    parse    :	[EnDe.HTTP.parse	('GWT',	src),	'GWT:  assume POST request for GWT: split on |'],
    parse    :	[EnDe.HTTP.parse	('XML',	src),	'XML:  assume POST request as XML: split on tags insede outer scope'],
    parse    :	[EnDe.HTTP.parse	('JSON',	src),	'JSON: assume POST request: split on ,'],
    parse    :	[EnDe.HTTP.parse	('JSON-GWT',	src),	'JSON-GWT: assume response from GWT: split on , inside []'],

  DE: {
	header   :	[EnDe.HTTP.DE.header	(src),	'parse HTTP message headers, return hash {\\'head\\': value, ... }'],
	body     :	[EnDe.HTTP.DE.body	(src),	'parse HTTP message body, return hash {\\'key\\': value, ... }'],
	parse    :	[EnDe.HTTP.DE.parse	(src),	'parse given source and store data in EnDe.HTTP.request, EnDe.HTTP.response'],
	get      :	[EnDe.HTTP.DE.get	(typ,	dst,	src),	'get value of specified typ from dst'],
	'dumm':'dumm'},

  EN: {
	header   :	[EnDe.HTTP.EN.header	(dst),	'build HTTP message header from dst (request or response)'],
	body     :	[EnDe.HTTP.EN.body	(dst),	'build HTTP message body from dst (request or response)'],
	set      :	[EnDe.HTTP.EN.set	(_n1_,	dst,	src),	'build HTTP message from dst (request or response)'],
	'dumm':'dumm'},

  req: {
	'object for request methods'],
	analyze  :	[EnDe.HTTP.req.analyze	(src),	get      :	[EnDe.HTTP.req.get	(typ,	src),	set      :	[EnDe.HTTP.req.set	(_n1_,	src),	'dumm':'dumm'},

  res: {
	analyze  :	[EnDe.HTTP.res.analyze	(src),	get      :	[EnDe.HTTP.res.get	(typ,	src),	set      :	[EnDe.HTTP.res.set	(_n1_,	src),	'dumm':'dumm'},
    dispatch :	[EnDe.HTTP.dispatch	(item,	src,	pos),	'wrapper for various HTTP text analysis; returns array with data'],
    NULL     :	[EnDe.HTTP.NULL	(src),	'dumm':'dumm'},
	set      :	[EnDe.set	(typ,	dst,	src),	'build HTTP message from dst (request or response)'],
  desc: '163'
	}; // .list
};
// @(#) EnDeFunc.js 3.32 ; generated by EnDe2js.pl 3.17  from: EnDe.js 3.32 12/06/04 21:52:10
/*
 * parameters named _n1_, _n2_, .. _n7_ are unused parameters for that function
 */
if (typeof(EnDe)==='undefined') { EnDe = new function() {}; }
EnDe.Func   = new function() {
	this.SID    = '3.32';
	this.list   = {
 encode :	[EnDe.encode	(type,	mode,	upper,	src,	prefix,	suffix,	delim),	'wrapper for EnDe.EN.dispatch()'],
decode :	[EnDe.decode	(type,	mode,	upper,	src,	prefix,	suffix,	delim),	'wrapper for EnDe.DE.dispatch()'],
convert:	[EnDe.convert	(type,	mode,	upper,	src,	prefix,	suffix,	delim),	'wrapper for EnDe.IP.dispatch()'],
alert  :	[EnDe.alert	(func,	txt),	'internal wrapper for alert()'],

  CONST: {

  CHR: {
	'dumm':'dumm'},

  INT: {
	'dumm':'dumm'},

  CST: {
	'dumm':'dumm'},

  ESC: {
	'dumm':'dumm'},
	'dumm':'dumm'},
rex    :	[EnDe.rex	(src),	'escape meta characters for RegExp'],
isBin  :	[EnDe.isBin	(src),	'return true if string consist of 0 and 1 characters only'],
isOct  :	[EnDe.isOct	(src),	'return true if string consist of octal characters only'],
isInt  :	[EnDe.isInt	(src),	'return true if string consist of dezimal characters only'],
isHex  :	[EnDe.isHex	(src),	'return true if string consist of hex characters only'],
isB16  :	[EnDe.isB16	(src),	'return true if string consist of Base16 characters only'],
isB32  :	[EnDe.isB32	(src),	'return true if string consist of Base32 characters only'],
isB64  :	[EnDe.isB64	(src),	'return true if string consist of Base64 characters only'],
isU64  :	[EnDe.isU64	(src),	'return true if string consist of Url64 characters only'],
isalnum:	[EnDe.isalnum	(src),	'return true if string consist of alpha-numeric characters only'],
isTyp  :	[EnDe.isTyp	(type,	src),	'return true if string is of given type'],
join   :	[EnDe.join	(type,	mode,	_n3_,	src,	prefix,	suffix,	delim),	'global replace newlinw or tab character'],
join   :	[EnDe.join	('arg',	mode,	_n3_,	src,	prefix,	suffix,	delim),	'arg: global replace newline by &'],
join   :	[EnDe.join	('key',	mode,	_n3_,	src,	prefix,	suffix,	delim),	'key: global replace tabs by ='],
join   :	[EnDe.join	('del',	mode,	_n3_,	src,	prefix,	suffix,	delim),	'del: global replace newline by given delimiter'],
split  :	[EnDe.split	(type,	mode,	_n3_,	src,	prefix,	suffix,	delim),	'global split'],
split  :	[EnDe.split	('arg',	mode,	_n3_,	src,	prefix,	suffix,	delim),	'arg: global split, replace & by newline by &'],
split  :	[EnDe.split	('key',	mode,	_n3_,	src,	prefix,	suffix,	delim),	'key: global split, replace = by tabs by ='],
split  :	[EnDe.split	('del',	mode,	_n3_,	src,	prefix,	suffix,	delim),	'del: global split, replace given delimiter by newline'],
trim   :	[EnDe.trim	(src),	'trim leading and trailing white spaces'],
chr2bytes  :	[EnDe.chr2bytes	(src),	'convert (unicode) character to array of 1 or 2 bytes; src is a single character'],
str2bytes  :	[EnDe.str2bytes	(src),	'convert (unicode) character string to array of bytes'],
chr2code :	[EnDe.chr2code	(src),	'convert plain text to JavaScript char codes (integer of unicode); src is a single character'],
chr2bin_DoesNotWork :	[EnDe.chr2bin_DoesNotWork	(type,	src),	'convert character to n-bit binary string; src is a single character; type is number of bits'],
chr2bin :	[EnDe.chr2bin	(type,	src),	'convert character to n-bit binary string; src is a single character; type is number of bits'],
java2chr :	[EnDe.java2chr	(src),	'convert char code to character using java.lang.Character()'],
code2chr :	[EnDe.code2chr	(src),	'convert JavaScript char codes (integer of unicode) to plain text'],
code2prn :	[EnDe.code2prn	(src),	'convert JavaScript char code (integer of unicode) to printable (ASCII) character'],
prn2code :	[EnDe.prn2code	(src),	'convert printable (ASCII) character to JavaScript char code (integer of unicode)'],
chr2prn :	[EnDe.chr2prn	(type,	src),	'convert JavaScript character to printable (ASCII) character, non-printable are \\xXX'],
chr2prn :	[EnDe.chr2prn	('null',	src),	'null: convert non-printable to hex (no padding, see EnDe.i2h())'],
chr2prn :	[EnDe.chr2prn	('3',	src),	'3:    convert non-printable to 3-digit hex (see EnDe.i2h())'],
chr2prn :	[EnDe.chr2prn	('n',	src),	'n:    convert non-printable to n-digit hex (see EnDe.i2h())'],
str2bin :	[EnDe.str2bin	(type,	src,	prefix,	suffix,	delim),	'convert string to n-bit binary string; type is number of bits'],
str2chr :	[EnDe.str2chr	(src,	prefix,	suffix,	delim),	'convert string to list of characters with prefix, delimiter and suffix'],
str2lng :	[EnDe.str2lng	(src),	'convert a string to an array of long integers'],
lng2str :	[EnDe.lng2str	(src),	'convert an array of long integers to a string'],
z2n    :	[EnDe.z2n	(src),	'convert negative numbers to numbers (2^32)'],
n2z    :	[EnDe.n2z	(src),	'convert numbers (2^32) to negative numbers'],
z2n64  :	[EnDe.z2n64	(src),	'convert negative numbers to numbers (2^64)'],
n2z64  :	[EnDe.n2z64	(src),	'convert numbers (2^64) to negative numbers'],
h2i    :	[EnDe.h2i	(src),	'convert hex value (string) to integer'],
i2h    :	[EnDe.i2h	(type,	src),	'convert integer (string) value to hex'],
i2h    :	[EnDe.i2h	('null',	src),	'null: converted hex (no padding)'],
i2h    :	[EnDe.i2h	('hex0',	src),	'hex0: converted hex (no padding)'],
i2h    :	[EnDe.i2h	('hex1',	src),	'hex1: converted hex (no padding)'],
i2h    :	[EnDe.i2h	('3',	src),	'3:    converted 3-digit hex'],
i2h    :	[EnDe.i2h	('n',	src),	'n:    converted n-digit hex'],
h2c    :	[EnDe.h2c	(src),	'convert hex value (string) to characters'],
h2b    :	[EnDe.h2b	(src),	'convert hex value (string) to binary'],
b2h    :	[EnDe.b2h	(src),	'convert binary value (string) to hex (binary limeted to 2^53)'],
i2b    :	[EnDe.i2b	(src),	'convert integer (string) value to binary'],
b2i    :	[EnDe.b2i	(src),	'convert binary value (string) to hex (binary limeted to 2^53)'],
i2bcd  :	[EnDe.i2bcd	(src),	'convert digit to BCD code (4 dual digits)'],
bcd2i  :	[EnDe.bcd2i	(src),	'convert BCD code (4 dual digits) to digit'],
reverse :	[EnDe.reverse	(src),	'reverse characters in string (mirror sring)'],
atbash :	[EnDe.atbash	(src),	'convert plain text to Atbash encoding'],
a2e    :	[EnDe.a2e	(src),	'convert ASCII to EBCDIC characters'],
e2a    :	[EnDe.e2a	(src),	'convert EBCDIC to ASCII characters'],
xor    :	[EnDe.xor	(src,	key),	'XOR each character with first character from key'],
rot    :	[EnDe.rot	(src,	key),	'convert string to rot-N-encoded text (aka Caesar encoding); key is number/position of character: 1..26'],
dez2hex :	[EnDe.dez2hex	(type,	mode,	upper,	src,	prefix,	suffix,	_n7_),	'convert decimal encoded text to hex encoded text'],
dez2hex :	[EnDe.dez2hex	('null',	mode,	upper,	src,	prefix,	suffix,	_n7_),	'null: converted hex value without prefix'],
dez2hex :	[EnDe.dez2hex	('qp2',	mode,	upper,	src,	prefix,	suffix,	_n7_),	'qp2:  converted hex value prefixed with ='],
dez2hex :	[EnDe.dez2hex	('url2',	mode,	upper,	src,	prefix,	suffix,	_n7_),	'url2: converted hex value prefixed with %'],
dez2hex :	[EnDe.dez2hex	('url3',	mode,	upper,	src,	prefix,	suffix,	_n7_),	'url3: converted hex value prefixed with %0'],
dez2hex :	[EnDe.dez2hex	('url4',	mode,	upper,	src,	prefix,	suffix,	_n7_),	'url4: converted hex value prefixed with %00'],
dez2hex :	[EnDe.dez2hex	('ncr2',	mode,	upper,	src,	prefix,	suffix,	_n7_),	'ncr2: converted hex value prefixed with &#x'],
dez2hex :	[EnDe.dez2hex	('ncr4',	mode,	upper,	src,	prefix,	suffix,	_n7_),	'ncr4: converted hex value prefixed with &#x00'],
h2n    :	[EnDe.h2n	(type,	mode,	upper,	src,	prefix,	suffix,	delim),	'convert hex value to its nibble hex values (1-byte values supported only)'],
h2n    :	[EnDe.h2n	('nibbles',	mode,	upper,	src,	prefix,	suffix,	delim),	'nibbles: convert hex value to its nibble hex values'],
h2n    :	[EnDe.h2n	('nibble1',	mode,	upper,	src,	prefix,	suffix,	delim),	'nibble1: convert hex value to its first nibble hex value'],
h2n    :	[EnDe.h2n	('nibble2',	mode,	upper,	src,	prefix,	suffix,	delim),	'nibble2: convert hex value to its second nibble hex value'],

  UCS: {
    isUCS    :	[EnDe.UCS.isUCS	(src),	'return true if charcter is valid code point; src is a single character'],
    isUTF7   :	[EnDe.UCS.isUTF7	(src),	'return true if charcter is UTF-7 character; src is a single character'],
    isBOM    :	[EnDe.UCS.isBOM	(type,	src),	'dispatcher to check for BOM'],
    isBOM    :	[EnDe.UCS.isBOM	('UTF32BE',	src),	'UTF32BE: return true for UTF32BE BOM'],
    isBOM    :	[EnDe.UCS.isBOM	('UTF32LE',	src),	'UTF32LE: return true for UTF32LE BOM'],
    isBOM    :	[EnDe.UCS.isBOM	('UTF16BE',	src),	'UTF16BE: return true for UTF16BE BOM'],
    isBOM    :	[EnDe.UCS.isBOM	('UTF16LE',	src),	'UTF16LE: return true for UTF16LE BOM'],
    isBOM    :	[EnDe.UCS.isBOM	('UTF8',	src),	'UTF8   : return true for UTF8 BOM'],
    getBOM   :	[EnDe.UCS.getBOM	(type),	'get (character) value for BOM'],
    getBOM   :	[EnDe.UCS.getBOM	('UTF32BE'),	'UTF32BE: return UTF32BE BOM bytes'],
    getBOM   :	[EnDe.UCS.getBOM	('UTF32LE'),	'UTF32LE: return UTF32LE BOM bytes'],
    getBOM   :	[EnDe.UCS.getBOM	('UTF16BE'),	'UTF16BE: return UTF16BE BOM bytes'],
    getBOM   :	[EnDe.UCS.getBOM	('UTF16LE'),	'UTF16LE: return UTF16LE BOM bytes'],
    getBOM   :	[EnDe.UCS.getBOM	('UTF8'),	'UTF8   : return UTF8 BOM bytes'],
    str32BE  :	[EnDe.UCS.str32BE	(src),	'return true if string starts with UTF-32 big-endian BOM'],
    str32LE  :	[EnDe.UCS.str32LE	(src),	'return true if string starts with UTF-32 little-endian BOM'],
    str16BE  :	[EnDe.UCS.str16BE	(src),	'return true if string starts with UTF-16 big-endian BOM'],
    str16LE  :	[EnDe.UCS.str16LE	(src),	'return true if string starts with UTF-16 little-endian BOM'],
    strUTF8  :	[EnDe.UCS.strUTF8	(src),	'return true if string starts with UTF-8 BOM'],
    f2h      :	[EnDe.UCS.f2h	(src),	'convert fullwidth Unicode to halfwidth Unicode characters'],
    h2f      :	[EnDe.UCS.h2f	(src),	'convert halfwidth Unicode to fullwidth Unicode characters'],
    utf16le  :	[EnDe.UCS.utf16le	(src),	'convert Unicode to UTF-16-LE characters'],
    utf16be  :	[EnDe.UCS.utf16be	(src),	'convert Unicode to UTF-16-BE characters'],
    utf32le  :	[EnDe.UCS.utf32le	(src),	'convert Unicode to UTF-32-LE characters'],
	'dumm':'dumm'},

  IDN: {
    libidn   :	[EnDe.IDN.libidn	(src,	suffix),	'check for trailing suffix and remove it'],
    str2puny :	[EnDe.IDN.str2puny	(src),	'convert plain text to punycode'],
    str2idn  :	[EnDe.IDN.str2idn	(src),	'convert plain text to IDN/punycode'],
    puny2str :	[EnDe.IDN.puny2str	(src),	'convert punycode to plain text'],
    idn2str  :	[EnDe.IDN.idn2str	(src),	'convert IDN/punycode plain text'],
	'dumm':'dumm'},

  EN: {
    chr      :	[EnDe.EN.chr	(_n1_,	_n2_,	_n3_,	src,	prefix,	suffix,	delim),	'convert string to list of characters with prefix, delimiter and suffix'],
    hex      :	[EnDe.EN.hex	(type,	mode,	upper,	src,	prefix,	suffix,	delim),	'convert plain text to hex encoded text'],
    hex      :	[EnDe.EN.hex	('null',	mode,	upper,	src,	prefix,	suffix,	delim),	'null: converted hex value without prefix and no padding'],
    hex      :	[EnDe.EN.hex	('qp2',	mode,	upper,	src,	prefix,	suffix,	delim),	'qp2:  converted hex value prefixed with ='],
    hex      :	[EnDe.EN.hex	('hex0',	mode,	upper,	src,	prefix,	suffix,	delim),	'hex0: converted hex value (no padding)'],
    hex      :	[EnDe.EN.hex	('hex1',	mode,	upper,	src,	prefix,	suffix,	delim),	'hex1: converted hex value (no padding)'],
    hex      :	[EnDe.EN.hex	('2',	mode,	upper,	src,	prefix,	suffix,	delim),	'2:    converted 2-digit hex'],
    hex      :	[EnDe.EN.hex	('3',	mode,	upper,	src,	prefix,	suffix,	delim),	'3:    converted 3-digit hex'],
    hex      :	[EnDe.EN.hex	('n',	mode,	upper,	src,	prefix,	suffix,	delim),	'n:    converted n-digit hex'],
    hex      :	[EnDe.EN.hex	('url2',	mode,	upper,	src,	prefix,	suffix,	delim),	'url2: converted hex value prefixed with %'],
    hex      :	[EnDe.EN.hex	('url3',	mode,	upper,	src,	prefix,	suffix,	delim),	'url3: converted hex value prefixed with %0'],
    hex      :	[EnDe.EN.hex	('url4',	mode,	upper,	src,	prefix,	suffix,	delim),	'url4: converted hex value prefixed with %00'],
    hex      :	[EnDe.EN.hex	('urlc',	mode,	upper,	src,	prefix,	suffix,	delim),	'urlc: set high bit in hex encoding (results in %c0 prefix)'],
    hex      :	[EnDe.EN.hex	('ncr2',	mode,	upper,	src,	prefix,	suffix,	delim),	'ncr2: converted hex value prefixed with &#x'],
    hex      :	[EnDe.EN.hex	('ncr4',	mode,	upper,	src,	prefix,	suffix,	delim),	'ncr4: converted hex value prefixed with &#x00'],
    hex      :	[EnDe.EN.hex	('nibbles',	mode,	upper,	src,	prefix,	suffix,	delim),	'nibbles: convert hex value to its nibble hex values'],
    hex      :	[EnDe.EN.hex	('nibble1',	mode,	upper,	src,	prefix,	suffix,	delim),	'nibble1: convert hex value to its first nibble hex value'],
    hex      :	[EnDe.EN.hex	('nibble2',	mode,	upper,	src,	prefix,	suffix,	delim),	'nibble2: convert hex value to its second nibble hex value'],
    url      :	[EnDe.EN.url	(type,	mode,	upper,	src,	prefix,	suffix,	delim),	'convert plain text to URL encoded text'],
    url      :	[EnDe.EN.url	('null',	mode,	upper,	src,	prefix,	suffix,	delim),	'null: converted URL (hex) value without prefix and no padding'],
    url      :	[EnDe.EN.url	('qp2',	mode,	upper,	src,	prefix,	suffix,	delim),	'qp2:  converted URL (hex) value prefixed with ='],
    url      :	[EnDe.EN.url	('hex0',	mode,	upper,	src,	prefix,	suffix,	delim),	'hex0: converted URL (hex) value (no padding)'],
    url      :	[EnDe.EN.url	('hex1',	mode,	upper,	src,	prefix,	suffix,	delim),	'hex1: converted URL (hex) value (no padding)'],
    url      :	[EnDe.EN.url	('3',	mode,	upper,	src,	prefix,	suffix,	delim),	'3:    converted 3-digit URL (hex)'],
    url      :	[EnDe.EN.url	('n',	mode,	upper,	src,	prefix,	suffix,	delim),	'n:    converted n-digit URL (hex)'],
    url      :	[EnDe.EN.url	('url2',	mode,	upper,	src,	prefix,	suffix,	delim),	'url2: converted URL (hex) value prefixed with %'],
    url      :	[EnDe.EN.url	('url3',	mode,	upper,	src,	prefix,	suffix,	delim),	'url3: converted URL (hex) value prefixed with %0'],
    url      :	[EnDe.EN.url	('url4',	mode,	upper,	src,	prefix,	suffix,	delim),	'url4: converted URL (hex) value prefixed with %00'],
    url      :	[EnDe.EN.url	('urlc',	mode,	upper,	src,	prefix,	suffix,	delim),	'urlc: set high bit in URL (hex) encoding (results in %c0 prefix)'],
    url      :	[EnDe.EN.url	('ncr2',	mode,	upper,	src,	prefix,	suffix,	delim),	'ncr2: converted URL (hex) value prefixed with &#x'],
    url      :	[EnDe.EN.url	('ncr4',	mode,	upper,	src,	prefix,	suffix,	delim),	'ncr4: converted URL (hex) value prefixed with &#x00'],
    url      :	[EnDe.EN.url	('ucs',	mode,	upper,	src,	prefix,	suffix,	delim),	'ucs:  converted URL (hex) value prefixed with % (hex values for Unicode character)'],
    url      :	[EnDe.EN.url	('utf8',	mode,	upper,	src,	prefix,	suffix,	delim),	'utf8: converted URL (hex) value prefixed with % (hex values for UTF-8 character)'],
    url      :	[EnDe.EN.url	('utf8c',	mode,	upper,	src,	prefix,	suffix,	delim),	'utf8c: set high bit in URL (hex) encoding (results in %c0 prefix)'],
    url      :	[EnDe.EN.url	('nibbles',	mode,	upper,	src,	prefix,	suffix,	delim),	'nibbles: convert URL (hex) value to its nibble hex values'],
    url      :	[EnDe.EN.url	('nibble1',	mode,	upper,	src,	prefix,	suffix,	delim),	'nibble1: convert URL (hex) value to its first nibble hex value'],
    url      :	[EnDe.EN.url	('nibble2',	mode,	upper,	src,	prefix,	suffix,	delim),	'nibble2: convert URL (hex) value to its second nibble hex value'],
    dez      :	[EnDe.EN.dez	(type,	mode,	_n3_,	src,	prefix,	suffix,	delim),	'convert plain text to decimal encoded text'],
    dez      :	[EnDe.EN.dez	('null',	mode,	_n3_,	src,	prefix,	suffix,	delim),	'null: converted decimal value with variable length (2-3 digits)'],
    dez      :	[EnDe.EN.dez	('ncr2',	mode,	_n3_,	src,	prefix,	suffix,	delim),	'ncr2: converted decimal value prefixed with &#x'],
    dez      :	[EnDe.EN.dez	('3',	mode,	_n3_,	src,	prefix,	suffix,	delim),	'3:    converted 3-digit decimal'],
    dez      :	[EnDe.EN.dez	('n',	mode,	_n3_,	src,	prefix,	suffix,	delim),	'n:    converted n-digit decimal'],
    oct      :	[EnDe.EN.oct	(type,	mode,	upper,	src,	prefix,	suffix,	delim),	'convert plain text to octal encoded text'],
    oct      :	[EnDe.EN.oct	('null',	mode,	upper,	src,	prefix,	suffix,	delim),	'null: converted octal value with variable length (2-3 digits)'],
    oct      :	[EnDe.EN.oct	('3',	mode,	upper,	src,	prefix,	suffix,	delim),	'3:    converted 3-digit octal'],
    oct      :	[EnDe.EN.oct	('n',	mode,	upper,	src,	prefix,	suffix,	delim),	'n:    converted n-digit octal'],
    bin      :	[EnDe.EN.bin	(type,	mode,	_n3_,	src,	prefix,	suffix,	delim),	'convert string to n-bit binary string'],
    bin      :	[EnDe.EN.bin	('6',	mode,	_n3_,	src,	prefix,	suffix,	delim),	'6:    converted 6-digit binary'],
    bin      :	[EnDe.EN.bin	('7',	mode,	_n3_,	src,	prefix,	suffix,	delim),	'7:    converted 7-digit binary'],
    bin      :	[EnDe.EN.bin	('8',	mode,	_n3_,	src,	prefix,	suffix,	delim),	'8:    converted 8-digit binary'],
    bcd      :	[EnDe.EN.bcd	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'convert numbers in text to BCD coded numbers'],
    aiken    :	[EnDe.EN.aiken	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'convert numbers in text to Aiken coded numbers'],
    stibitz  :	[EnDe.EN.stibitz	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	delim),	'convert numbers in text to Stibitz coded numbers'],
    cp   :	[EnDe.EN.cp	(src),	'convert all characters from unicode base to Windows CP-1252 characters'],
    dta  :	[EnDe.EN.dta	(src),	'convert all characters from ASCII to DIN66003 characters'],
    ucs      :	[EnDe.EN.ucs	(type,	mode,	upper,	src,	prefix,	suffix,	delim),	'convert plain text to Unicode UCS-2 encoded text'],
    ucs      :	[EnDe.EN.ucs	('null',	mode,	upper,	src,	prefix,	suffix,	delim),	'null: converted Unicode without prefix'],
    ucs      :	[EnDe.EN.ucs	('url4',	mode,	upper,	src,	prefix,	suffix,	delim),	'url4: converted Unicode prefixed %u'],
    ucs      :	[EnDe.EN.ucs	('ucs4',	mode,	upper,	src,	prefix,	suffix,	delim),	'ucs4: converted Unicode prefixed \\u'],
    ucs      :	[EnDe.EN.ucs	('IE4',	mode,	upper,	src,	prefix,	suffix,	delim),	'IE4:  converted Unicode prefixed \\u'],
    utf7     :	[EnDe.EN.utf7	(type,	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'convert plain text to UTF-7 encoded text'],
    utf7     :	[EnDe.EN.utf7	('null',	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'null: convert UTF-7 unsave characters only'],
    utf7     :	[EnDe.EN.utf7	('all',	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'all:  convert all characters'],
    utf      :	[EnDe.EN.utf	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'dispatcher/wrapper for EnDe.UCS.* calls'],
    utf16le  :	[EnDe.EN.utf16le	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'wrapper for EnDe.UCS.utf16le'],
    utf16be  :	[EnDe.EN.utf16be	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'wrapper for EnDe.UCS.utf16be'],
    utf16    :	[EnDe.EN.utf16	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'wrapper for EnDe.UCS.utf16be'],
    utf32le  :	[EnDe.EN.utf32le	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'wrapper for EnDe.UCS.utf32le'],
    utf32be  :	[EnDe.EN.utf32be	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'wrapper for EnDe.UCS.utf32be'],
    utf8bom  :	[EnDe.EN.utf8bom	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'convert plain text to UTF-8 encoded text with BOM'],
    utf8     :	[EnDe.EN.utf8	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'convert plain text to UTF-8 encoded text'],
    f2h      :	[EnDe.EN.f2h	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'convert fullwidth Unicode to halfwidth Unicode characters; wrapper for EnDe.UCS.f2h()'],
    h2f      :	[EnDe.EN.h2f	(type,	mode,	upper,	src,	_n5_,	_n6_,	_n7_),	'convert halfwidth Unicode to fullwidth Unicode characters (UTF-16, 2 bytes)'],
    h2f      :	[EnDe.EN.h2f	('null',	mode,	upper,	src,	_n5_,	_n6_,	_n7_),	'null: converted fullwidth Unicode characters are UTF-16, 2 bytes'],
    h2f      :	[EnDe.EN.h2f	('utf8',	mode,	upper,	src,	_n5_,	_n6_,	_n7_),	'utf8: converted fullwidth Unicode characters are UTF-8, 3 bytes'],
    ncr      :	[EnDe.EN.ncr	(type,	mode,	upper,	src,	prefix,	suffix,	delim),	'convert plain text to named/numbered HTML-Entity'],
    ncr      :	[EnDe.EN.ncr	('null',	mode,	upper,	src,	prefix,	suffix,	delim),	'null: assume standard character map; using HTML named Entities'],
    ncr      :	[EnDe.EN.ncr	('name',	mode,	upper,	src,	prefix,	suffix,	delim),	'name: assume standard character map; using HTML named Entities'],
    ncr      :	[EnDe.EN.ncr	('css',	mode,	upper,	src,	prefix,	suffix,	delim),	'css:  assume standard character map; using HTML hex numberd Entities'],
    ncr      :	[EnDe.EN.ncr	('dez',	mode,	upper,	src,	prefix,	suffix,	delim),	'dez:  assume standard character map; using HTML decimal numberd Entities'],
    ncr      :	[EnDe.EN.ncr	('winf',	mode,	upper,	src,	prefix,	suffix,	delim),	'winf: assume force convertion as from Windows CP-1252 character map'],
    ncr      :	[EnDe.EN.ncr	('win',	mode,	upper,	src,	prefix,	suffix,	delim),	'win:  assume Windows CP-1252 character map'],
    toCode   :	[EnDe.EN.toCode	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'wrapper for EnDe.chr2code()'],
    fromCode :	[EnDe.EN.fromCode	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'wrapper for EnDe.code2chr()'],
    fromJava :	[EnDe.EN.fromJava	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'wrapper for EnDe.java2chr()'],
    xml      :	[EnDe.EN.xml	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'convert plain text to XML-escaped text'],
    esc      :	[EnDe.EN.esc	(type,	_n2_,	upper,	src,	_n5_,	_n6_,	_n7_),	'convert plain text to escaped text'],
    esc      :	[EnDe.EN.esc	('escCSS',	_n2_,	upper,	src,	_n5_,	_n6_,	_n7_),	'escCSS:  use CSS hex numbered entities'],
    esc      :	[EnDe.EN.esc	('escHTML',	_n2_,	upper,	src,	_n5_,	_n6_,	_n7_),	'escHTML: use HTML named Entities'],
    esc      :	[EnDe.EN.esc	('escURL',	_n2_,	upper,	src,	_n5_,	_n6_,	_n7_),	'escURL:  use URL encoding'],
    esc      :	[EnDe.EN.esc	('escJS',	_n2_,	upper,	src,	_n5_,	_n6_,	_n7_),	'escJS:   use \\-escaped \\ and " and \\''],
    esc      :	[EnDe.EN.esc	('escSQL',	_n2_,	upper,	src,	_n5_,	_n6_,	_n7_),	'escSQL:  use \\'\\' for \\''],
    esc      :	[EnDe.EN.esc	('escQuote',	_n2_,	upper,	src,	_n5_,	_n6_,	_n7_),	'escQuote:  use URL encoding'],
    esc      :	[EnDe.EN.esc	('escXML',	_n2_,	upper,	src,	_n5_,	_n6_,	_n7_),	'escXML:  use XML named Entities'],
    esc      :	[EnDe.EN.esc	('escJava',	_n2_,	upper,	src,	_n5_,	_n6_,	_n7_),	'escJava: use \\-escaped " and \\uHHHH for other non-US-ASCII'],
    uu_DoesNotWork       :	[EnDe.EN.uu_DoesNotWork	(src),	'**trash**'],
    uu       :	[EnDe.EN.uu	(type,	mode,	_n3_,	src,	prefix,	suffix,	delim),	'convert plain text to UUencode text; delimiter is the padding character'],
    uu       :	[EnDe.EN.uu	('null',	mode,	_n3_,	src,	prefix,	suffix,	delim),	'null:'],
    uu       :	[EnDe.EN.uu	('raw',	mode,	_n3_,	src,	prefix,	suffix,	delim),	'raw:  convert UUencode without prefix and suffix'],
    uu       :	[EnDe.EN.uu	('all',	mode,	_n3_,	src,	prefix,	suffix,	delim),	'all:  convert all characters'],
    qp       :	[EnDe.EN.qp	(type,	mode,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'convert plain text to quoted printable text'],
    qp       :	[EnDe.EN.qp	('null',	mode,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'null: convert all characters'],
    qp       :	[EnDe.EN.qp	('raw',	mode,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'raw:  do not convert \\n and \\r characters'],
    idn      :	[EnDe.EN.idn	(type,	_n2_,	_n3_,	src,	_n5_,	suffix,	_n7_),	'convert string to punycode or IDNA-punycode'],
    idn      :	[EnDe.EN.idn	('IDN',	_n2_,	_n3_,	src,	_n5_,	suffix,	_n7_),	'IDN:  convert URI only'],
    idn      :	[EnDe.EN.idn	('PNY',	_n2_,	_n3_,	src,	_n5_,	suffix,	_n7_),	'PNY:  convert FQDN only (strip off leading schema and trailing search parameter)'],
    idn      :	[EnDe.EN.idn	('PNY_',	_n2_,	_n3_,	src,	_n5_,	suffix,	_n7_),	'PNY_: convert complete string'],
    idn      :	[EnDe.EN.idn	('IDN_',	_n2_,	_n3_,	src,	_n5_,	suffix,	_n7_),	'IDN_: convert complete string'],
    a2e      :	[EnDe.EN.a2e	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'convert ASCII to EBCDIC characters'],
    e2a      :	[EnDe.EN.e2a	(_n1_,	_n2_,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'convert EBCDIC to ASCII characters'],
    rot      :	[EnDe.EN.rot	(_n1_,	_n2_,	_n3_,	src,	_n5_,	key,	_n7_),	'convert string to rot-N-encoded text (aka Caesar encoding)'],
    sos      :	[EnDe.EN.sos	(_n1_,	mode,	_n3_,	src,	prefix,	suffix,	delim),	'convert to morse characters'],
    baudot   :	[EnDe.EN.baudot	(_n1_,	mode,	_n3_,	src,	_n5_,	_n6_,	delim),	'convert to Baudot characters'],
    braille  :	[EnDe.EN.braille	(type,	mode,	_n3_,	src,	prefix,	_n6_,	delim),	'convert to Braille characters'],
    braille  :	[EnDe.EN.braille	('ASCIIBr',	mode,	_n3_,	src,	prefix,	_n6_,	delim),	'ASCIIBr:  use ASCII-Braille symbols'],
    braille  :	[EnDe.EN.braille	('dotBr',	mode,	_n3_,	src,	prefix,	_n6_,	delim),	'dotBr:    use dot-Braille symbols'],
    braille  :	[EnDe.EN.braille	('NumBr',	mode,	_n3_,	src,	prefix,	_n6_,	delim),	'NumBr:    use number symbols'],
    braille  :	[EnDe.EN.braille	('DadaUrka',	mode,	_n3_,	src,	prefix,	_n6_,	delim),	'DadaUrka: use Dada Urka symbols'],
    blade    :	[EnDe.EN.blade	(type,	mode,	_n3_,	src,	_n5_,	_n6_,	_n7_),	'convert digits to Blade (ASCII) symbols'],
    dmp      :	[EnDe.EN.dmp	(type,	mode,	upper,	src,	prefix,	suffix,	delim),	'convert to traditional xdump style: hex values left, characters right'],
    odx      :	[EnDe.EN.odx	(type,	mode,	upper,	src,	prefix,	suffix,	delim),	'convert to traditional "od -x" style: double hex values with space as delimiter'],
    odx      :	[EnDe.EN.odx	('ODx',	mode,	upper,	src,	prefix,	suffix,	delim),	'ODx: od -x style big endian'],
    odx      :	[EnDe.EN.odx	('xOD',	mode,	upper,	src,	prefix,	suffix,	delim),	'xOD: od -x style little endian'],
    crc      :	[EnDe.EN.crc	(type,	mode,	upper,	src,	iv,	mask,	polynom),	'wrapper for CRC functions'],
    md4      :	[EnDe.EN.md4	(type,	mode,	upper,	src,	prefix,	key,	delim),	'wrapper for str_md4()'],
    md5      :	[EnDe.EN.md5	(type,	mode,	upper,	src,	prefix,	key,	delim),	'wrapper for str_md5()'],
    sha      :	[EnDe.EN.sha	(type,	mode,	upper,	src,	prefix,	key,	delim),	'wrapper for sha1()'],
    sha256   :	[EnDe.EN.sha256	(type,	mode,	upper,	src,	prefix,	key,	delim),	'wrapper for sha2()'],
    sha384   :	[EnDe.EN.sha384	(type,	mode,	upper,	src,	prefix,	key,	delim),	'wrapper for sha384()'],
    sha512   :	[EnDe.EN.sha512	(type,	mode,	upper,	src,	prefix,	key,	delim),	'wrapper for sha512()'],
    blowfish :	[EnDe.EN.blowfish	(type,	mode,	upper,	src,	prefix,	key,	delim),	'wrapper for blowfish()'],
    aes      :	[EnDe.EN.aes	(type,	mode,	upper,	src,	prefix,	key,	delim),	'wrapper for AES(); uppercase parameter is escCtl (see aes.js)'],
    rmd      :	[EnDe.EN.rmd	(type,	mode,	upper,	src,	_n5_,	key,	delim),	'wrapper for gen_otp_rmd160(); delimiter is the number of iterations'],
    tea      :	[EnDe.EN.tea	(type,	mode,	upper,	src,	prefix,	key,	delim),	'encrypt a string using the Block Tiny Encryption Algorithm'],
    yenc     :	[EnDe.EN.yenc	(type,	mode,	upper,	src,	prefix,	key,	delim),	'yEncode'],
    rsaz     :	[EnDe.EN.rsaz	(type,	mode,	upper,	src,	prefix,	key,	delim),	'**not yet implemented**'],
    guess    :	[EnDe.EN.guess	(_n1_,	mode,	upper,	src,	prefix,	suffix,	delim),	'**depricated**'],
    dispatch :	[EnDe.EN.dispatch	(type,	mode,	upper,	src,	prefix,	suffix,	delim),	'dispatcher for encoding functions'],
	'dumm':'dumm'},

  DE: {
    chr      :	[EnDe.DE.chr	(_n1_,	_n2_,	_n3_,	src,	prefix,	suffix,	delim),	'convert string to list of characters with prefix, delimiter and suffix'],
    url      :	[EnDe.DE.url	(type,	mode,	src,	prefix,	suffix,	delim),	'convert URL encoded text to plain text'],
    url      :	[EnDe.DE.url	('null',	mode,	src,	prefix,	suffix,	delim),	'null: just convert each %HH value'],
    url      :	[EnDe.DE.url	('utf8',	mode,	src,	prefix,	suffix,	delim),	'utf8: convert each %HH value, then convert UTF-8 characters'],
    url      :	[EnDe.DE.url	('utf8c',	mode,	src,	prefix,	suffix,	delim),	'utf8c: convert each %HH value, then convert UTF-8 characters (with high bit set)'],
    ucs      :	[EnDe.DE.ucs	(type,	mode,	src,	prefix,	suffix,	delim),	'convert URL encoded (none US ASCII Unicode) text to plain text'],
    ucs      :	[EnDe.DE.ucs	('url2',	mode,	src,	prefix,	suffix,	delim),	'url2: convert %HH%HH strings'],
    ucs      :	[EnDe.DE.ucs	('url4',	mode,	src,	prefix,	suffix,	delim),	'url4: convert %uHHHH strings (see EnDe.DE.num(\\'hex\\',...) also)'],
    ucs      :	[EnDe.DE.ucs	('ucs4',	mode,	src,	prefix,	suffix,	delim),	'ucs4: convert \\uHHHH strings'],
    num      :	[EnDe.DE.num	(type,	mode,	src,	prefix,	suffix,	delim,	len),	'convert numeric encoded text to plain text; internal function, don\\'t use in API'],
    numstr   :	[EnDe.DE.numstr	(type,	mode,	src,	prefix,	suffix,	delim),	'convert hex, decimal or octal encoded text to plain text'],
    hex      :	[EnDe.DE.hex	(type,	mode,	src,	prefix,	suffix,	delim),	'convert hex-based encoded text to plain text'],
    dez      :	[EnDe.DE.dez	(type,	mode,	src,	prefix,	suffix,	delim),	'convert decimal-based encoded text to plain text'],
    oct      :	[EnDe.DE.oct	(type,	mode,	src,	prefix,	suffix,	delim),	'convert octal-based encoded text to plain text'],
    bin      :	[EnDe.DE.bin	(type,	mode,	src,	prefix,	suffix,	delim),	'convert binary-based encoded text to plain text'],
    bcd      :	[EnDe.DE.bcd	(_n1_,	_n2_,	src,	_n5_,	_n6_,	delim),	'convert BCD coded numbers to digits'],
    aiken    :	[EnDe.DE.aiken	(_n1_,	_n2_,	src,	_n5_,	_n6_,	delim),	'convert Aiken coded numbers in text to digits'],
    stibitz  :	[EnDe.DE.stibitz	(_n1_,	_n2_,	src,	_n5_,	_n6_,	delim),	'convert Stibitz coded numbers in text to digits'],
    cp   :	[EnDe.DE.cp	(src),	'convert all characters from Windows CP-1252 to unicode base characters'],
    dta  :	[EnDe.DE.dta	(src),	'convert all characters from DIN66003 to ASCII characters'],
    utf7     :	[EnDe.DE.utf7	(_n1_,	_n2_,	src,	_n5_,	_n6_,	_n7_),	'convert UTF-7 encoded text to plain text'],
    utf8     :	[EnDe.DE.utf8	(_n1_,	_n2_,	src,	_n5_,	_n6_,	_n7_),	'convert UTF-8 encoded text to plain text'],
    f2h      :	[EnDe.DE.f2h	(_n1_,	_n2_,	src,	_n5_,	_n6_,	_n7_),	'convert fullwidth Unicode to halfwidth Unicode characters; wrapper for EnDe.UCS.f2h()'],
    h2f      :	[EnDe.DE.h2f	(_n1_,	_n2_,	src,	_n5_,	_n6_,	_n7_),	'convert halfwidth Unicode to fullwidth Unicode characters; wrapper for EnDe.UCS.h2f()'],
    ncr      :	[EnDe.DE.ncr	(type,	mode,	src,	prefix,	suffix,	delim),	'convert named HTML-Entity to plain text'],
    toCode   :	[EnDe.DE.toCode	(type,	mode,	src,	prefix,	suffix,	delim),	'wrapper for EnDe.chr2code()'],
    fromCode :	[EnDe.DE.fromCode	(type,	mode,	src,	prefix,	suffix,	delim),	'wrapper for EnDe.code2chr()'],
    fromJava :	[EnDe.DE.fromJava	(type,	mode,	src,	prefix,	suffix,	delim),	'wrapper for EnDe.java2chr()'],
    xml      :	[EnDe.DE.xml	(_n1_,	_n2_,	src,	_n5_,	_n6_,	_n7_),	'convert XML encoded text to plain text'],
    esc      :	[EnDe.DE.esc	(type,	_n2_,	src,	_n5_,	_n6_,	_n7_),	'convert enscaped text to plain text'],
    esc      :	[EnDe.DE.esc	('escCSS',	_n2_,	src,	_n5_,	_n6_,	_n7_),	'escCSS:  expect CSS hex numbered entities'],
    esc      :	[EnDe.DE.esc	('escHTML',	_n2_,	src,	_n5_,	_n6_,	_n7_),	'escHTML: expect HTML named Entities'],
    esc      :	[EnDe.DE.esc	('escURL',	_n2_,	src,	_n5_,	_n6_,	_n7_),	'escURL:  expect URL encoding'],
    esc      :	[EnDe.DE.esc	('escJS',	_n2_,	src,	_n5_,	_n6_,	_n7_),	'escJS:   expect JavaScript escaping'],
    esc      :	[EnDe.DE.esc	('escSQL',	_n2_,	src,	_n5_,	_n6_,	_n7_),	'escSQL:  convert \\'\\' to \\''],
    esc      :	[EnDe.DE.esc	('escXML',	_n2_,	src,	_n5_,	_n6_,	_n7_),	'escXML:  expect XML named Entities'],
    esc      :	[EnDe.DE.esc	('escQuote',	_n2_,	src,	_n5_,	_n6_,	_n7_),	'escQuote: convert \\\\' and \\" to \\' "'],
    esc      :	[EnDe.DE.esc	('escJava',	_n2_,	src,	_n5_,	_n6_,	_n7_),	'escJava: expect Java escaping'],
    uu       :	[EnDe.DE.uu	(type,	mode,	src,	prefix,	suffix,	delim),	'convert UUencode text to plain text; delimiter is the padding character'],
    uu       :	[EnDe.DE.uu	('hist',	mode,	src,	prefix,	suffix,	delim),	'hist:'],
    uu       :	[EnDe.DE.uu	('raw',	mode,	src,	prefix,	suffix,	delim),	'raw:'],
    uu       :	[EnDe.DE.uu	('user',	mode,	src,	prefix,	suffix,	delim),	'user:'],
    qp       :	[EnDe.DE.qp	(_n1_,	mode,	src,	_n5_,	_n6_,	_n7_),	'convert quoted printable text to plain text'],
    idn      :	[EnDe.DE.idn	(type,	_n3_,	src,	_n5_,	suffix,	_n7_),	'convert punycode or IDNA-punycode to string'],
    idn      :	[EnDe.DE.idn	('IDN',	_n3_,	src,	_n5_,	suffix,	_n7_),	'IDN:  convert URI only'],
    idn      :	[EnDe.DE.idn	('PNY',	_n3_,	src,	_n5_,	suffix,	_n7_),	'PNY:  convert FQDN only (strip off leading schema and trailing search parameter)'],
    idn      :	[EnDe.DE.idn	('PNY_',	_n3_,	src,	_n5_,	suffix,	_n7_),	'PNY_: convert complete string'],
    idn      :	[EnDe.DE.idn	('IDN_',	_n3_,	src,	_n5_,	suffix,	_n7_),	'IDN_: convert complete string'],
    a2e      :	[EnDe.DE.a2e	(_n1_,	_n2_,	src,	_n5_,	_n6_,	_n7_),	'convert ASCII to EBCDIC characters'],
    e2a      :	[EnDe.DE.e2a	(_n1_,	_n2_,	src,	_n5_,	_n6_,	_n7_),	'convert EBCDIC to ASCII characters'],
    rot      :	[EnDe.DE.rot	(_n1_,	_n2_,	src,	_n5_,	key,	_n7_),	'convert string to rot-N-encoded text (aka Caesar encoding)'],
    sos      :	[EnDe.DE.sos	(type,	mode,	src,	prefix,	suffix,	delim),	'convert morse characters to plain text'],
    baudot   :	[EnDe.DE.baudot	(type,	mode,	src,	prefix,	suffix,	delim),	'convert Baudot characters to plain text'],
    dmp      :	[EnDe.DE.dmp	(type,	mode,	upper,	src,	prefix,	suffix,	delim),	'convert from traditional xdump or od style: (hex values left only)'],
    dmp      :	[EnDe.DE.dmp	('hex',	mode,	upper,	src,	prefix,	suffix,	delim),	'hex: \\'xdump\\' style input (space seperated hex values left, strings right)'],
    dmp      :	[EnDe.DE.dmp	('ODx',	mode,	upper,	src,	prefix,	suffix,	delim),	'ODx: \\'od -x\\' style input (count, 2- or 4-byte hex values)'],
    dmp      :	[EnDe.DE.dmp	('xDO',	mode,	upper,	src,	prefix,	suffix,	delim),	'xDO: \\'od -x\\' style input (count, 4-byte hex values little endian)'],
    blowfish :	[EnDe.DE.blowfish	(type,	mode,	upper,	src,	prefix,	key,	delim),	'wrapper for blowfish()'],
    aes      :	[EnDe.DE.aes	(type,	mode,	upper,	src,	prefix,	key,	delim),	'wrapper for AES(); uppercase parameter is escCtl (see aes.js)'],
    tea      :	[EnDe.DE.tea	(type,	mode,	upper,	src,	prefix,	key,	delim),	'decrypt a string using the Block Tiny Encryption Algorithm'],
    yenc     :	[EnDe.DE.yenc	(type,	mode,	upper,	src,	prefix,	key,	delim),	'yDecode'],
    fuzzy    :	[EnDe.DE.fuzzy	(type,	mode,	src,	prefix,	suffix,	delim),	'fuzzy decoding ..'],
    fuzzy    :	[EnDe.DE.fuzzy	('fuzOCTsq',	mode,	src,	prefix,	suffix,	delim),	'fuzOCTsq: decode octal inside single quotes'],
    fuzzy    :	[EnDe.DE.fuzzy	('fuzOCTdq',	mode,	src,	prefix,	suffix,	delim),	'fuzOCTdq: decode octal inside double quotes'],
    fuzzy    :	[EnDe.DE.fuzzy	('fuzHEXsq',	mode,	src,	prefix,	suffix,	delim),	'fuzHEXsq: decode hex inside single quotes'],
    fuzzy    :	[EnDe.DE.fuzzy	('fuzHEXdq',	mode,	src,	prefix,	suffix,	delim),	'fuzHEXdq: decode hex inside double quotes'],
    fuzzy    :	[EnDe.DE.fuzzy	('fuzUCSsq',	mode,	src,	prefix,	suffix,	delim),	'fuzUCSsq: decode Unicode inside single quotes'],
    fuzzy    :	[EnDe.DE.fuzzy	('fuzUCSdq',	mode,	src,	prefix,	suffix,	delim),	'fuzUCSdq: decode Unicode inside double quotes'],
    fuzzy    :	[EnDe.DE.fuzzy	('...',	mode,	src,	prefix,	suffix,	delim),	'...'],
    guess    :	[EnDe.DE.guess	(_n1_,	mode,	upper,	src,	prefix,	suffix,	delim),	'**depricated**'],
    dispatch :	[EnDe.DE.dispatch	(type,	mode,	upper,	src,	prefix,	suffix,	delim),	'dispatcher for decoding functions'],
	'dumm':'dumm'},
	'dumm':'dumm'},
rfc2396    :	[.rfc2396	(),	'container for RFC2396 definitions ** NOT YET USED **'],
    encode   :	[.encode	(src,	upper),	'encode string according RFC 2396'],
additionalBase64Encoding :	[.additionalBase64Encoding	(src),	'additional Base64 character encoding ** NOT YET USED **'],
additionalBase64Decoding :	[.additionalBase64Decoding	(src),	'additional Base64 character decoding ** NOT YET USED **'],
  desc: '336'
	}; // .list
};
