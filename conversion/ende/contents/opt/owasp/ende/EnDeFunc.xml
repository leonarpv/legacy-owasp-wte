<?xml version="1.0"?>
<!-- @(#) EnDeFunc.xml 3.6 ; generated by EnDe2js.pl 3.17  from: aes.js 3.6 12/06/03 12:54:55 -->
<!-- parameters named _n1_, _n2_, .. _n7_ are unused parameters for that function -->
<xss>
    <attack>
	<label>EnDe.AES.EN</label>
	<name>EnDe.AES.EN.aes   </name>
 	<code><![CDATA[EnDe.AES.EN.aes(key,s,n) ]]></code>
    <attack>
	<label>EnDe.AES.EN</label>
	<name>EnDe.AES.EN.aes128</name>
 	<code><![CDATA[EnDe.AES.EN.aes128(key, s)  ]]></code>
    <attack>
	<label>EnDe.AES.EN</label>
	<name>EnDe.AES.EN.aes192</name>
 	<code><![CDATA[EnDe.AES.EN.aes192(key, s)  ]]></code>
    <attack>
	<label>EnDe.AES.EN</label>
	<name>EnDe.AES.EN.aes256</name>
 	<code><![CDATA[EnDe.AES.EN.aes256(key, s)  ]]></code>
    <attack>
	<label>EnDe.AES.DE</label>
	<name>EnDe.AES.DE.aes   </name>
 	<code><![CDATA[EnDe.AES.DE.aes(key,s,n) ]]></code>
    <attack>
	<label>EnDe.AES.DE</label>
	<name>EnDe.AES.DE.aes128</name>
 	<code><![CDATA[EnDe.AES.DE.aes128(key, s)  ]]></code>
    <attack>
	<label>EnDe.AES.DE</label>
	<name>EnDe.AES.DE.aes192</name>
 	<code><![CDATA[EnDe.AES.DE.aes192(key, s)  ]]></code>
    <attack>
	<label>EnDe.AES.DE</label>
	<name>EnDe.AES.DE.aes265</name>
 	<code><![CDATA[EnDe.AES.DE.aes265(key, s)  ]]></code>
    <attack>
	<label>EnDe.Blowfish</label>
	<name>EnDe.Blowfish.encrypt    </name>
		<code><![CDATA[EnDe.Blowfish.encrypt(key,$('EnDeDOM.EN.text').value) ]]></code>
    <attack>
	<label>EnDe.Blowfish</label>
	<name>EnDe.Blowfish.decrypt    </name>
		<code><![CDATA[EnDe.Blowfish.decrypt(key,$('EnDeDOM.EN.text').value) ]]></code>
    <attack>
	<label>EnDe.Blowfish.EN</label>
	<name>EnDe.Blowfish.EN.blowfish   </name>
			<code><![CDATA[EnDe.Blowfish.EN.blowfish(key,$('EnDeDOM.EN.text').value)  ]]></code>
    <attack>
	<label>EnDe.Blowfish.DE</label>
	<name>EnDe.Blowfish.DE.blowfish   </name>
			<code><![CDATA[EnDe.Blowfish.DE.blowfish(key,$('EnDeDOM.EN.text').value)  ]]></code>
    <attack>
	<label>EnDe.Blowfish</label>
	<name>EnDe.Blowfish.escape</name>
		<code><![CDATA[EnDe.Blowfish.escape(t) ]]></code>
    <attack>
	<label>EnDe.Blowfish</label>
	<name>EnDe.Blowfish.wordbyte0</name>
		<code><![CDATA[EnDe.Blowfish.wordbyte0(w) ]]></code>
    <attack>
	<label>EnDe.Blowfish</label>
	<name>EnDe.Blowfish.wordbyte1</name>
		<code><![CDATA[EnDe.Blowfish.wordbyte1(w) ]]></code>
    <attack>
	<label>EnDe.Blowfish</label>
	<name>EnDe.Blowfish.wordbyte2</name>
		<code><![CDATA[EnDe.Blowfish.wordbyte2(w) ]]></code>
    <attack>
	<label>EnDe.Blowfish</label>
	<name>EnDe.Blowfish.wordbyte3</name>
		<code><![CDATA[EnDe.Blowfish.wordbyte3(w) ]]></code>
    <attack>
	<label>EnDe.Blowfish</label>
	<name>EnDe.Blowfish.xor</name>
		<code><![CDATA[EnDe.Blowfish.xor(w1,w2) ]]></code>
    <attack>
	<label>EnDe.Blowfish</label>
	<name>EnDe.Blowfish.unescape</name>
		<code><![CDATA[EnDe.Blowfish.unescape(t) ]]></code>
    <attack>
	<label>EnDe.CRC</label>
	<name>EnDe.CRC.reflectByte  </name>
  	<code><![CDATA[EnDe.CRC.reflectByte($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[reflect one byte]]></desc>
    </attack>
    <attack>
	<label>EnDe.CRC</label>
	<name>EnDe.CRC.reflect  </name>
  	<code><![CDATA[EnDe.CRC.reflect($('EnDeDOM.EN.text').value,bitnum,startLSB)  ]]></code>
	<desc><![CDATA[reflect 'bitnum' bits starting at lowest bit = startLSB]]></desc>
    </attack>
    <attack>
	<label>EnDe.CRC</label>
	<name>EnDe.CRC.c8tab      </name>
  	<code><![CDATA[EnDe.CRC.c8tab($('EnDeDOM.EN.text').value,iv,mask,polynomial)   ]]></code>
	<desc><![CDATA[compute CRC-8 checksum]]></desc>
    </attack>
    <attack>
	<label>EnDe.CRC</label>
	<name>EnDe.CRC.crc16     </name>
  	<code><![CDATA[EnDe.CRC.crc16($('EnDeDOM.EN.text').value,iv,mask,polynomial)   ]]></code>
	<desc><![CDATA[compute CRC-16 checksum]]></desc>
    </attack>
    <attack>
	<label>EnDe.CRC</label>
	<name>EnDe.CRC.c16arc   </name>
  	<code><![CDATA[EnDe.CRC.c16arc($('EnDeDOM.EN.text').value,iv,mask)   ]]></code>
	<desc><![CDATA[compute CRC-16 checksum using classic table (ARC)]]></desc>
    </attack>
    <attack>
	<label>EnDe.CRC</label>
	<name>EnDe.CRC.c16ppp   </name>
  	<code><![CDATA[EnDe.CRC.c16ppp($('EnDeDOM.EN.text').value,iv,mask)   ]]></code>
	<desc><![CDATA[compute CRC-16 checksum using RFC-1662 table (aka PPP, aka FCS-16)]]></desc>
    </attack>
    <attack>
	<label>EnDe.CRC</label>
	<name>EnDe.CRC.c16zmo   </name>
  	<code><![CDATA[EnDe.CRC.c16zmo($('EnDeDOM.EN.text').value,iv,mask)   ]]></code>
	<desc><![CDATA[compute CRC-16 checksum using ZModem table]]></desc>
    </attack>
    <attack>
	<label>EnDe.CRC</label>
	<name>EnDe.CRC.c32tab   </name>
  	<code><![CDATA[EnDe.CRC.c32tab($('EnDeDOM.EN.text').value,iv,mask)   ]]></code>
	<desc><![CDATA[compute CRC-32 checksum (aka FCS-32)]]></desc>
    </attack>
    <attack>
	<label>EnDe.CRC</label>
	<name>EnDe.CRC.dispatch </name>
  	<code><![CDATA[EnDe.CRC.dispatch("null",$('EnDeDOM.EN.text').value,iv,mask,polynomial)  ]]></code>
	<desc><![CDATA[wrapper for CRC functions]]></desc>
    </attack>
    <attack>
	<label>EnDe.MD4</label>
	<name>EnDe.MD4.hex_md4 </name>
	<code><![CDATA[EnDe.MD4.hex_md4(s) ]]></code>
    <attack>
	<label>EnDe.MD4</label>
	<name>EnDe.MD4.b64_md4 </name>
	<code><![CDATA[EnDe.MD4.b64_md4(s) ]]></code>
    <attack>
	<label>EnDe.MD4</label>
	<name>EnDe.MD4.str_md4 </name>
	<code><![CDATA[EnDe.MD4.str_md4(s) ]]></code>
    <attack>
	<label>EnDe.MD4</label>
	<name>EnDe.MD4.hex_hmac_md4 </name>
	<code><![CDATA[EnDe.MD4.hex_hmac_md4(key, s)  ]]></code>
    <attack>
	<label>EnDe.MD4</label>
	<name>EnDe.MD4.b64_hmac_md4 </name>
	<code><![CDATA[EnDe.MD4.b64_hmac_md4(key, s)  ]]></code>
    <attack>
	<label>EnDe.MD4</label>
	<name>EnDe.MD4.str_hmac_md4 </name>
	<code><![CDATA[EnDe.MD4.str_hmac_md4(key, s)  ]]></code>
    <attack>
	<label>EnDe.MD5</label>
	<name>EnDe.MD5.hex_md5 </name>
	<code><![CDATA[EnDe.MD5.hex_md5(s) ]]></code>
    <attack>
	<label>EnDe.MD5</label>
	<name>EnDe.MD5.b64_md5 </name>
	<code><![CDATA[EnDe.MD5.b64_md5(s) ]]></code>
    <attack>
	<label>EnDe.MD5</label>
	<name>EnDe.MD5.str_md5 </name>
	<code><![CDATA[EnDe.MD5.str_md5(s) ]]></code>
    <attack>
	<label>EnDe.MD5</label>
	<name>EnDe.MD5.hex_hmac_md5 </name>
	<code><![CDATA[EnDe.MD5.hex_hmac_md5(key, s)  ]]></code>
    <attack>
	<label>EnDe.MD5</label>
	<name>EnDe.MD5.b64_hmac_md5 </name>
	<code><![CDATA[EnDe.MD5.b64_hmac_md5(key, s)  ]]></code>
    <attack>
	<label>EnDe.MD5</label>
	<name>EnDe.MD5.str_hmac_md5 </name>
	<code><![CDATA[EnDe.MD5.str_hmac_md5(key, s)  ]]></code>
    <attack>
	<label>EnDe.RMD</label>
	<name>EnDe.RMD.word     </name>
  	<code><![CDATA[EnDe.RMD.word(key, $('EnDeDOM.EN.text').value, i)  ]]></code>
    <attack>
	<label>EnDe.RMD</label>
	<name>EnDe.RMD.hex      </name>
  	<code><![CDATA[EnDe.RMD.hex(key, $('EnDeDOM.EN.text').value, i)  ]]></code>
    <attack>
	<label>EnDe.SHA</label>
	<name>EnDe.SHA.safe_add </name>
  	<code><![CDATA[EnDe.SHA.safe_add(x, y)  ]]></code>
    <attack>
	<label>EnDe.SHA</label>
	<name>EnDe.SHA.rol </name>
  	<code><![CDATA[EnDe.SHA.rol(num, cnt)  ]]></code>
    <attack>
	<label>EnDe.SHA</label>
	<name>EnDe.SHA.str2binb </name>
  	<code><![CDATA[EnDe.SHA.str2binb(str)  ]]></code>
    <attack>
	<label>EnDe.SHA</label>
	<name>EnDe.SHA.binb2str </name>
  	<code><![CDATA[EnDe.SHA.binb2str(bin)  ]]></code>
    <attack>
	<label>EnDe.SHA</label>
	<name>EnDe.SHA.binb2hex </name>
  	<code><![CDATA[EnDe.SHA.binb2hex(binarray)  ]]></code>
    <attack>
	<label>EnDe.SHA</label>
	<name>EnDe.SHA.binb2b64 </name>
  	<code><![CDATA[EnDe.SHA.binb2b64(binarray)  ]]></code>
    <attack>
	<label>EnDe.SHA.sha1</label>
	<name>EnDe.SHA.sha1.ft </name>
		<code><![CDATA[EnDe.SHA.sha1.ft(t, b, c, d)  ]]></code>
    <attack>
	<label>EnDe.SHA.sha1</label>
	<name>EnDe.SHA.sha1.kt </name>
		<code><![CDATA[EnDe.SHA.sha1.kt(t)  ]]></code>
    <attack>
	<label>EnDe.SHA.sha1</label>
	<name>EnDe.SHA.sha1.core </name>
		<code><![CDATA[EnDe.SHA.sha1.core(x,len)  ]]></code>
    <attack>
	<label>EnDe.SHA.sha1</label>
	<name>EnDe.SHA.sha1.test   </name>
		<code><![CDATA[EnDe.SHA.sha1.test()  ]]></code>
    <attack>
	<label>EnDe.SHA.sha1</label>
	<name>EnDe.SHA.sha1.hex    </name>
		<code><![CDATA[EnDe.SHA.sha1.hex(s) ]]></code>
    <attack>
	<label>EnDe.SHA.sha1</label>
	<name>EnDe.SHA.sha1.b64    </name>
		<code><![CDATA[EnDe.SHA.sha1.b64(s) ]]></code>
    <attack>
	<label>EnDe.SHA.sha1</label>
	<name>EnDe.SHA.sha1.str    </name>
		<code><![CDATA[EnDe.SHA.sha1.str(s) ]]></code>
    <attack>
	<label>EnDe.SHA.sha1.hmac</label>
	<name>EnDe.SHA.sha1.hmac.hex</name>
			<code><![CDATA[EnDe.SHA.sha1.hmac.hex(key, s) ]]></code>
    <attack>
	<label>EnDe.SHA.sha1.hmac</label>
	<name>EnDe.SHA.sha1.hmac.b64</name>
			<code><![CDATA[EnDe.SHA.sha1.hmac.b64(key, s) ]]></code>
    <attack>
	<label>EnDe.SHA.sha1.hmac</label>
	<name>EnDe.SHA.sha1.hmac.str</name>
			<code><![CDATA[EnDe.SHA.sha1.hmac.str(key, s) ]]></code>
    <attack>
	<label>EnDe.SHA.sha1.hmac</label>
	<name>EnDe.SHA.sha1.hmac.core </name>
			<code><![CDATA[EnDe.SHA.sha1.hmac.core(key, data)  ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.S      </name>
		<code><![CDATA[EnDe.SHA.sha2.S(x,n)    ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.R      </name>
		<code><![CDATA[EnDe.SHA.sha2.R(x,n)    ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.Ch     </name>
		<code><![CDATA[EnDe.SHA.sha2.Ch(x,y,z)  ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.Maj    </name>
		<code><![CDATA[EnDe.SHA.sha2.Maj(x,y,z)  ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.sigma0256  </name>
		<code><![CDATA[EnDe.SHA.sha2.sigma0256(x)  ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.sigma1256  </name>
		<code><![CDATA[EnDe.SHA.sha2.sigma1256(x)  ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.gamma0256  </name>
		<code><![CDATA[EnDe.SHA.sha2.gamma0256(x)  ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.gamma1256  </name>
		<code><![CDATA[EnDe.SHA.sha2.gamma1256(x)  ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.sigma0512  </name>
		<code><![CDATA[EnDe.SHA.sha2.sigma0512(x)  ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.sigma1512  </name>
		<code><![CDATA[EnDe.SHA.sha2.sigma1512(x)  ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.gamma0512  </name>
		<code><![CDATA[EnDe.SHA.sha2.gamma0512(x)  ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.gamma1512  </name>
		<code><![CDATA[EnDe.SHA.sha2.gamma1512(x)  ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.core256    </name>
		<code><![CDATA[EnDe.SHA.sha2.core256(m, l)  ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.core512    </name>
		<code><![CDATA[EnDe.SHA.sha2.core512(m, l)  ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.test256</name>
		<code><![CDATA[EnDe.SHA.sha2.test256()  ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.test   </name>
		<code><![CDATA[EnDe.SHA.sha2.test()  ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.hex    </name>
		<code><![CDATA[EnDe.SHA.sha2.hex(s) ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.b64    </name>
		<code><![CDATA[EnDe.SHA.sha2.b64(s) ]]></code>
    <attack>
	<label>EnDe.SHA.sha2</label>
	<name>EnDe.SHA.sha2.str    </name>
		<code><![CDATA[EnDe.SHA.sha2.str(s) ]]></code>
    <attack>
	<label>EnDe.SHA5</label>
	<name>EnDe.SHA5. hex_sha </name>
	<code><![CDATA[EnDe.SHA5. hex_sha(string, variant)  ]]></code>
	<desc><![CDATA[SHA-384, SHA-512 hash ]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64</label>
	<name>EnDe.B64.isB16  </name>
		<code><![CDATA[EnDe.B64.isB16($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of base16 characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64</label>
	<name>EnDe.B64.isB26  </name>
		<code><![CDATA[EnDe.B64.isB26($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of base64 characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64</label>
	<name>EnDe.B64.isB34  </name>
		<code><![CDATA[EnDe.B64.isB34($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of base34 characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64</label>
	<name>EnDe.B64.isB36  </name>
		<code><![CDATA[EnDe.B64.isB36($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of base64 characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64</label>
	<name>EnDe.B64.isB52  </name>
		<code><![CDATA[EnDe.B64.isB52($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of base64 characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64</label>
	<name>EnDe.B64.isB58  </name>
		<code><![CDATA[EnDe.B64.isB58($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of base64 characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64</label>
	<name>EnDe.B64.isB62  </name>
		<code><![CDATA[EnDe.B64.isB62($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of base64 characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64</label>
	<name>EnDe.B64.isB32c </name>
		<code><![CDATA[EnDe.B64.isB32c($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of Crockford base32 characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64</label>
	<name>EnDe.B64.isB32h </name>
		<code><![CDATA[EnDe.B64.isB32h($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of base32hex characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64</label>
	<name>EnDe.B64.isB32z </name>
		<code><![CDATA[EnDe.B64.isB32z($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of z-base32 characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64</label>
	<name>EnDe.B64.isB32  </name>
		<code><![CDATA[EnDe.B64.isB32($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of base32 characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64</label>
	<name>EnDe.B64.isB64  </name>
		<code><![CDATA[EnDe.B64.isB64($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of base64 characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64</label>
	<name>EnDe.B64.isU64  </name>
		<code><![CDATA[EnDe.B64.isU64($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of url64 characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64</label>
	<name>EnDe.B64.init     </name>
		<code><![CDATA[EnDe.B64.init()  ]]></code>
    <attack>
	<label>EnDe.B64</label>
	<name>EnDe.B64.is   </name>
		<code><![CDATA[EnDe.B64.is("null",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string is of given type]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("null",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[convert plain text to BaseXX encoded text]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base16",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base16:   Base16]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base26",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base26:   Base26]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base32",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base32:   Base32]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base32c",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base32c:  Base32 (Crockford alphabet)]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base32h",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base32h:  Base32hex]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base32z",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base32z:  z-Base32]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base34",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base34:   Base34]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base36",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base36:   Base36]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base52",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base52:   Base52]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base64",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base64:   Base64 as in RFC1521, RFC2045, RFC3548, RFC4648]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base64f",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base64f:  modified Base64 for filenames, SAP]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base64p",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base64p:  modified Base64 for program identifiers (var. 1)]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base64q",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base64q:  modified Base64 for program identifiers (var. 2)]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base64r",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base64r:  modified Base64 for regular Expressions]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base64u",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base64u:  modified Base64 for URL, RFC4648]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base64x",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base64x:  modified Base64 for XML name tokens]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base64y",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base64y:  modified Base64 for XML identifiers]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base85",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base85:   Base85]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base91",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base91:   basE91]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base94",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base94:   base94]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b_N      </name>
		<code><![CDATA[EnDe.B64.EN.b_N("base95",$('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[base95:   base95]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b64      </name>
		<code><![CDATA[EnDe.B64.EN.b64($('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[convert plain text to Base64 encoded text]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.u64      </name>
		<code><![CDATA[EnDe.B64.EN.u64($('EnDeDOM.EN.text').value,linewrap)  ]]></code>
	<desc><![CDATA[convert plain text to Url64 encoded text]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.b62      </name>
		<code><![CDATA[EnDe.B64.EN.b62(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,linewrap)  ]]></code>
	<desc><![CDATA[convert plain text to Base62 encoded text]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.EN</label>
	<name>EnDe.B64.EN.dispatch </name>
		<code><![CDATA[EnDe.B64.EN.dispatch("null",_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,linewrap)  ]]></code>
	<desc><![CDATA[wrapper for base-XX functions]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b_N    </name>
		<code><![CDATA[EnDe.B64.DE.b_N("null",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert BaseXX encoded text to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b_N    </name>
		<code><![CDATA[EnDe.B64.DE.b_N("base16",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[base16:   Base16]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b_N    </name>
		<code><![CDATA[EnDe.B64.DE.b_N("base26",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[base26:   Base26]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b_N    </name>
		<code><![CDATA[EnDe.B64.DE.b_N("base32",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[base32:   Base32]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b_N    </name>
		<code><![CDATA[EnDe.B64.DE.b_N("base32c",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[base32c:  Base32 (Crockford alphabet)]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b_N    </name>
		<code><![CDATA[EnDe.B64.DE.b_N("base32h",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[base32h:  Base32hex]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b_N    </name>
		<code><![CDATA[EnDe.B64.DE.b_N("base32z",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[base32z:  z-Base32]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b_N    </name>
		<code><![CDATA[EnDe.B64.DE.b_N("base36",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[base36:   Base36]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b_N    </name>
		<code><![CDATA[EnDe.B64.DE.b_N("base52",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[base52:   Base52]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b_N    </name>
		<code><![CDATA[EnDe.B64.DE.b_N("base64",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[base64:   Base64 as in RFC1521, RFC2045, RFC3548, RFC4648]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b_N    </name>
		<code><![CDATA[EnDe.B64.DE.b_N("base64f",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[base64f:  modified Base64 for filenames, SAP]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b_N    </name>
		<code><![CDATA[EnDe.B64.DE.b_N("base64p",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[base64p:  modified Base64 for program identifiers (var. 1)]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b_N    </name>
		<code><![CDATA[EnDe.B64.DE.b_N("base64q",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[base64q:  modified Base64 for program identifiers (var. 2)]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b_N    </name>
		<code><![CDATA[EnDe.B64.DE.b_N("base64r",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[base64r:  modified Base64 for regular Expressions]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b_N    </name>
		<code><![CDATA[EnDe.B64.DE.b_N("base64u",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[base64u:  modified Base64 for URL, RFC4648]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b_N    </name>
		<code><![CDATA[EnDe.B64.DE.b_N("base64x",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[base64x:  modified Base64 for XML name tokens]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b_N    </name>
		<code><![CDATA[EnDe.B64.DE.b_N("base64y",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[base64y:  modified Base64 for XML identifiers]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.b64    </name>
		<code><![CDATA[EnDe.B64.DE.b64($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert Base64 encoded text to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.u64    </name>
		<code><![CDATA[EnDe.B64.DE.u64($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert Url64 encoded text to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.dispatch   </name>
		<code><![CDATA[EnDe.B64.DE.dispatch("null","lazy",_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[wrapper for base-XX functions; mode may be used to allow "Impedanz Mismatch"]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.dispatch   </name>
		<code><![CDATA[EnDe.B64.DE.dispatch(type,"lazy",_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[strict:  allow valid chars only and need proper padding]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.dispatch   </name>
		<code><![CDATA[EnDe.B64.DE.dispatch(type,"lazy",_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[lazy:    allow valid chars only but padding is optional]]></desc>
    </attack>
    <attack>
	<label>EnDe.B64.DE</label>
	<name>EnDe.B64.DE.dispatch   </name>
		<code><![CDATA[EnDe.B64.DE.dispatch(type,"lazy",_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[verbose: invalid characters are ignored, padding is optional]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.ip2num   </name>
  	<code><![CDATA[EnDe.IP.ip2num(_n1_,_n2_,_n3_,$('EnDeDOM.IP.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert dotted quad IP address to integer]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.ip2big   </name>
  	<code><![CDATA[EnDe.IP.ip2big(_n1_,_n2_,_n3_,$('EnDeDOM.IP.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert dotted quad IP address to long integer]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.ip2xeh   </name>
  	<code><![CDATA[EnDe.IP.ip2xeh(_n1_,_n2_,$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.IP.text').value,$('EnDeDOM.API.prefix').value,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert dotted quad IP address to hex value]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.ip2hex   </name>
  	<code><![CDATA[EnDe.IP.ip2hex("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.IP.text').value,$('EnDeDOM.API.prefix').value,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert dotted quad IP address to dotted hex]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.ip2hex   </name>
  	<code><![CDATA[EnDe.IP.ip2hex("url","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.IP.text').value,$('EnDeDOM.API.prefix').value,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[url: convert dotted quad IP address to dotted url-encoded hex]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.ip2hex   </name>
  	<code><![CDATA[EnDe.IP.ip2hex("hex","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.IP.text').value,$('EnDeDOM.API.prefix').value,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[hex: convert dotted quad IP address to dotted hex]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.ip2hex   </name>
  	<code><![CDATA[EnDe.IP.ip2hex("xeh","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.IP.text').value,$('EnDeDOM.API.prefix').value,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[xeh: convert dotted quad IP address to hex value (wrapper for .IP.ip2xeh())]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.ip2oct   </name>
  	<code><![CDATA[EnDe.IP.ip2oct(_n1_,_n2_,_n3_,$('EnDeDOM.IP.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert dotted quad IP address to dotted octal]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.ip2bin   </name>
  	<code><![CDATA[EnDe.IP.ip2bin(_n1_,_n2_,_n3_,$('EnDeDOM.IP.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert dotted quad IP address to dotted binary]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.ip2bit   </name>
  	<code><![CDATA[EnDe.IP.ip2bit(_n1_,_n2_,_n3_,$('EnDeDOM.IP.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert dotted quad IP address to plain binary]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.ip2ip6   </name>
  	<code><![CDATA[EnDe.IP.ip2ip6("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.IP.text').value,$('EnDeDOM.API.prefix').value,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert dotted quad IP address to dotted IPv6]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.ip62ip   </name>
  	<code><![CDATA[EnDe.IP.ip62ip(_n1_,_n2_,_n3_,$('EnDeDOM.IP.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert dotted IPv6 to dotted quad IP address]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.bit2ip   </name>
  	<code><![CDATA[EnDe.IP.bit2ip(_n1_,_n2_,_n3_,$('EnDeDOM.IP.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert binary address to dotted quad IP address]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.num2ip   </name>
  	<code><![CDATA[EnDe.IP.num2ip(_n1_,_n2_,_n3_,$('EnDeDOM.IP.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert integer address to dotted quad IP address]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.big2ip   </name>
  	<code><![CDATA[EnDe.IP.big2ip("null",_n2_,_n3_,$('EnDeDOM.IP.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert long integer address to dotted quad IP address]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.big2ip   </name>
  	<code><![CDATA[EnDe.IP.big2ip("big2ip",_n2_,_n3_,$('EnDeDOM.IP.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[big2ip: convert long (64-bit) integer address to dotted quad IP address]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.big2ip   </name>
  	<code><![CDATA[EnDe.IP.big2ip("low2ip",_n2_,_n3_,$('EnDeDOM.IP.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[low2ip: convert long (32-bit) integer address to dotted quad IP address]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.arr2ip   </name>
  	<code><![CDATA[EnDe.IP.arr2ip(base,arr,arrsize,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[build dotted quad IP from given array; internal function, should not be used in API]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.xeh2ip   </name>
  	<code><![CDATA[EnDe.IP.xeh2ip(_n1_,_n2_,_n3_,$('EnDeDOM.IP.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert hex value to dotted quad IP address]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.hex2ip   </name>
  	<code><![CDATA[EnDe.IP.hex2ip(_n1_,_n2_,_n3_,$('EnDeDOM.IP.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert Hex address to dotted quad IP address]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.oct2ip   </name>
  	<code><![CDATA[EnDe.IP.oct2ip(_n1_,_n2_,_n3_,$('EnDeDOM.IP.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert octal address to dotted quad IP address]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.bin2ip   </name>
  	<code><![CDATA[EnDe.IP.bin2ip(_n1_,_n2_,_n3_,$('EnDeDOM.IP.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert binary address to dotted quad IP address]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.reverse  </name>
  	<code><![CDATA[EnDe.IP.reverse(_n1_,_n2_,_n3_,$('EnDeDOM.IP.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[reverse dotted IP address]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP.ipv6</label>
	<name>EnDe.IP.ipv6.ip2num </name>
		<code><![CDATA[EnDe.IP.ipv6.ip2num("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.IP.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[**not yet implemented**]]></desc>
    </attack>
    <attack>
	<label>EnDe.IP</label>
	<name>EnDe.IP.dispatch </name>
  	<code><![CDATA[EnDe.IP.dispatch("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.IP.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[dispatcher for IP functions]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.u2a  </name>
  	<code><![CDATA[EnDe.TS.u2a(ts)  ]]></code>
	<desc><![CDATA[convert Unix to windows ASP.NET (64bit) timestamp; ts have to be in millisecond format]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.w2a  </name>
  	<code><![CDATA[EnDe.TS.w2a(ts)  ]]></code>
	<desc><![CDATA[convert windows TDateTime (32bit) to ASP.NET (64bit) timestamp]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.d2a  </name>
  	<code><![CDATA[EnDe.TS.d2a(ts)  ]]></code>
	<desc><![CDATA[convert DOS (32bit) to ASP.NET (64bit) timestamp]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.o2a  </name>
  	<code><![CDATA[EnDe.TS.o2a(ts)  ]]></code>
	<desc><![CDATA[convert OLE to ASP.NET (64bit) timestamp]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.a2u  </name>
  	<code><![CDATA[EnDe.TS.a2u(ts)  ]]></code>
	<desc><![CDATA[convert windows ASP.NET (64bit) to Unix timestamp; ts returned in millisecond format]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.a2d  </name>
  	<code><![CDATA[EnDe.TS.a2d(ts)  ]]></code>
	<desc><![CDATA[convert windows ASP.NET (64bit) to DOS (32bit) timestamp]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.a2o  </name>
  	<code><![CDATA[EnDe.TS.a2o(ts)  ]]></code>
	<desc><![CDATA[convert windows ASP.NET (64bit) to OLE timestamp]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.a2w  </name>
  	<code><![CDATA[EnDe.TS.a2w(ts)  ]]></code>
	<desc><![CDATA[convert windows ASP.NET (64bit) to TDateTime (32bit) timestamp]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.w2u  </name>
  	<code><![CDATA[EnDe.TS.w2u(ts)  ]]></code>
	<desc><![CDATA[convert windows TDateTime (32bit) to Unix timestamp; ts returned in millisecond format]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.u2w  </name>
  	<code><![CDATA[EnDe.TS.u2w(ts)  ]]></code>
	<desc><![CDATA[convert Unix to windows TDateTime (32bit) timestamp; ts have to be in millisecond format]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.matchTime </name>
  	<code><![CDATA[EnDe.TS.matchTime(_n1_,_n2_,year2digits,strict,now,$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[try to match a time value]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.matchOffset </name>
  	<code><![CDATA[EnDe.TS.matchOffset(_n1_,_n2_,year2digits,strict,now,$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[check if value is a timestamp offset]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.matchDateTime </name>
  	<code><![CDATA[EnDe.TS.matchDateTime(_n1_,_n2_,year2digits,strict,now,$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[try to match a date/time value]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.joinTime </name>
  	<code><![CDATA[EnDe.TS.joinTime(hor)  ]]></code>
	<desc><![CDATA[return human readable time h:m:s]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.joinEmit </name>
  	<code><![CDATA[EnDe.TS.joinEmit(hor)  ]]></code>
	<desc><![CDATA[return human readable time s:m:h]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.joinDate </name>
  	<code><![CDATA[EnDe.TS.joinDate(hor)  ]]></code>
	<desc><![CDATA[return human readable date Y/M/D]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.joinEtad </name>
  	<code><![CDATA[EnDe.TS.joinEtad(hor)  ]]></code>
	<desc><![CDATA[return human readable date D/M/Y]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.guessInt </name>
  	<code><![CDATA[EnDe.TS.guessInt($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[guess time ..]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.guessOffset</name>
  	<code><![CDATA[EnDe.TS.guessOffset($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[guess time offset]]></desc>
    </attack>
    <attack>
	<label>EnDe.TS</label>
	<name>EnDe.TS.guess    </name>
  	<code><![CDATA[EnDe.TS.guess($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[guess date/time ..]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP</label>
	<name>EnDe.HTTP.str_index    </name>
  	<code><![CDATA[EnDe.HTTP.str_index(idx,$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return end of string starting at position idx 'til next occourance of character found at idx]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP</label>
	<name>EnDe.HTTP.str_scope    </name>
  	<code><![CDATA[EnDe.HTTP.str_scope(idx,$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return end of string starting at position idx 'til next occourance proper closing bracket]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP</label>
	<name>EnDe.HTTP.str_split    </name>
  	<code><![CDATA[EnDe.HTTP.str_split(typ,$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[split src on separator typ, return array]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP</label>
	<name>EnDe.HTTP.parse    </name>
  	<code><![CDATA[EnDe.HTTP.parse(typ,$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[dispatcher for parsing QUERY string, POST data, etc., returns array]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP</label>
	<name>EnDe.HTTP.parse    </name>
  	<code><![CDATA[EnDe.HTTP.parse("GET",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[GET:  assume search part of URL, split on &]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP</label>
	<name>EnDe.HTTP.parse    </name>
  	<code><![CDATA[EnDe.HTTP.parse("POST",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[POST: assume POST request: split on &]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP</label>
	<name>EnDe.HTTP.parse    </name>
  	<code><![CDATA[EnDe.HTTP.parse("mult",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[mult: assume POST request: split on boundary]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP</label>
	<name>EnDe.HTTP.parse    </name>
  	<code><![CDATA[EnDe.HTTP.parse("GWT",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[GWT:  assume POST request for GWT: split on |]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP</label>
	<name>EnDe.HTTP.parse    </name>
  	<code><![CDATA[EnDe.HTTP.parse("XML",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[XML:  assume POST request as XML: split on tags insede outer scope]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP</label>
	<name>EnDe.HTTP.parse    </name>
  	<code><![CDATA[EnDe.HTTP.parse("JSON",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[JSON: assume POST request: split on ,]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP</label>
	<name>EnDe.HTTP.parse    </name>
  	<code><![CDATA[EnDe.HTTP.parse("JSON-GWT",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[JSON-GWT: assume response from GWT: split on , inside []]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP.DE</label>
	<name>EnDe.HTTP.DE.header   </name>
		<code><![CDATA[EnDe.HTTP.DE.header($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[parse HTTP message headers, return hash {'head': value, ... }]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP.DE</label>
	<name>EnDe.HTTP.DE.body     </name>
		<code><![CDATA[EnDe.HTTP.DE.body($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[parse HTTP message body, return hash {'key': value, ... }]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP.DE</label>
	<name>EnDe.HTTP.DE.parse    </name>
		<code><![CDATA[EnDe.HTTP.DE.parse($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[parse given source and store data in EnDe.HTTP.request, EnDe.HTTP.response]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP.DE</label>
	<name>EnDe.HTTP.DE.get      </name>
		<code><![CDATA[EnDe.HTTP.DE.get(typ,dst,$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[get value of specified typ from dst]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP.EN</label>
	<name>EnDe.HTTP.EN.header   </name>
		<code><![CDATA[EnDe.HTTP.EN.header(dst)  ]]></code>
	<desc><![CDATA[build HTTP message header from dst (request or response)]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP.EN</label>
	<name>EnDe.HTTP.EN.body     </name>
		<code><![CDATA[EnDe.HTTP.EN.body(dst)  ]]></code>
	<desc><![CDATA[build HTTP message body from dst (request or response)]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP.EN</label>
	<name>EnDe.HTTP.EN.set      </name>
		<code><![CDATA[EnDe.HTTP.EN.set(_n1_,dst,$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[build HTTP message from dst (request or response)]]></desc>
    </attack>
	<desc><![CDATA[object for request methods]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP.req</label>
	<name>EnDe.HTTP.req.analyze  </name>
		<code><![CDATA[EnDe.HTTP.req.analyze($('EnDeDOM.EN.text').value)  ]]></code>
    <attack>
	<label>EnDe.HTTP.req</label>
	<name>EnDe.HTTP.req.get      </name>
		<code><![CDATA[EnDe.HTTP.req.get(typ,$('EnDeDOM.EN.text').value)  ]]></code>
    <attack>
	<label>EnDe.HTTP.req</label>
	<name>EnDe.HTTP.req.set      </name>
		<code><![CDATA[EnDe.HTTP.req.set(_n1_,$('EnDeDOM.EN.text').value)  ]]></code>
    <attack>
	<label>EnDe.HTTP.res</label>
	<name>EnDe.HTTP.res.analyze  </name>
		<code><![CDATA[EnDe.HTTP.res.analyze($('EnDeDOM.EN.text').value)  ]]></code>
    <attack>
	<label>EnDe.HTTP.res</label>
	<name>EnDe.HTTP.res.get      </name>
		<code><![CDATA[EnDe.HTTP.res.get(typ,$('EnDeDOM.EN.text').value)  ]]></code>
    <attack>
	<label>EnDe.HTTP.res</label>
	<name>EnDe.HTTP.res.set      </name>
		<code><![CDATA[EnDe.HTTP.res.set(_n1_,$('EnDeDOM.EN.text').value)  ]]></code>
    <attack>
	<label>EnDe.HTTP</label>
	<name>EnDe.HTTP.dispatch </name>
  	<code><![CDATA[EnDe.HTTP.dispatch(item,$('EnDeDOM.EN.text').value,pos)  ]]></code>
	<desc><![CDATA[wrapper for various HTTP text analysis; returns array with data]]></desc>
    </attack>
    <attack>
	<label>EnDe.HTTP</label>
	<name>EnDe.HTTP.NULL     </name>
  	<code><![CDATA[EnDe.HTTP.NULL($('EnDeDOM.EN.text').value)  ]]></code>
    <attack>
	<label>EnDe</label>
	<name>EnDe.set      </name>
		<code><![CDATA[EnDe.set(typ,dst,$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[build HTTP message from dst (request or response)]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.encode </name>
	<code><![CDATA[EnDe.encode("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[wrapper for EnDe.EN.dispatch()]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.decode </name>
	<code><![CDATA[EnDe.decode("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[wrapper for EnDe.DE.dispatch()]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.convert</name>
	<code><![CDATA[EnDe.convert("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[wrapper for EnDe.IP.dispatch()]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.alert  </name>
	<code><![CDATA[EnDe.alert(func,txt)  ]]></code>
	<desc><![CDATA[internal wrapper for alert()]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.rex    </name>
	<code><![CDATA[EnDe.rex($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[escape meta characters for RegExp]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.isBin  </name>
	<code><![CDATA[EnDe.isBin($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of 0 and 1 characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.isOct  </name>
	<code><![CDATA[EnDe.isOct($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of octal characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.isInt  </name>
	<code><![CDATA[EnDe.isInt($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of dezimal characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.isHex  </name>
	<code><![CDATA[EnDe.isHex($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of hex characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.isB16  </name>
	<code><![CDATA[EnDe.isB16($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of Base16 characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.isB32  </name>
	<code><![CDATA[EnDe.isB32($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of Base32 characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.isB64  </name>
	<code><![CDATA[EnDe.isB64($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of Base64 characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.isU64  </name>
	<code><![CDATA[EnDe.isU64($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of Url64 characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.isalnum</name>
	<code><![CDATA[EnDe.isalnum($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string consist of alpha-numeric characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.isTyp  </name>
	<code><![CDATA[EnDe.isTyp("null",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string is of given type]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.join   </name>
	<code><![CDATA[EnDe.join("null","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[global replace newlinw or tab character]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.join   </name>
	<code><![CDATA[EnDe.join("arg","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[arg: global replace newline by &]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.join   </name>
	<code><![CDATA[EnDe.join("key","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[key: global replace tabs by =]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.join   </name>
	<code><![CDATA[EnDe.join("del","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[del: global replace newline by given delimiter]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.split  </name>
	<code><![CDATA[EnDe.split("null","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[global split]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.split  </name>
	<code><![CDATA[EnDe.split("arg","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[arg: global split, replace & by newline by &]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.split  </name>
	<code><![CDATA[EnDe.split("key","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[key: global split, replace = by tabs by =]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.split  </name>
	<code><![CDATA[EnDe.split("del","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[del: global split, replace given delimiter by newline]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.trim   </name>
	<code><![CDATA[EnDe.trim($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[trim leading and trailing white spaces]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.chr2bytes  </name>
	<code><![CDATA[EnDe.chr2bytes($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert (unicode) character to array of 1 or 2 bytes; src is a single character]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.str2bytes  </name>
	<code><![CDATA[EnDe.str2bytes($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert (unicode) character string to array of bytes]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.chr2code </name>
	<code><![CDATA[EnDe.chr2code($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert plain text to JavaScript char codes (integer of unicode); src is a single character]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.chr2bin_DoesNotWork </name>
	<code><![CDATA[EnDe.chr2bin_DoesNotWork("null",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert character to n-bit binary string; src is a single character; type is number of bits]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.chr2bin </name>
	<code><![CDATA[EnDe.chr2bin("null",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert character to n-bit binary string; src is a single character; type is number of bits]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.java2chr </name>
	<code><![CDATA[EnDe.java2chr($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert char code to character using java.lang.Character()]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.code2chr </name>
	<code><![CDATA[EnDe.code2chr($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert JavaScript char codes (integer of unicode) to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.code2prn </name>
	<code><![CDATA[EnDe.code2prn($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert JavaScript char code (integer of unicode) to printable (ASCII) character]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.prn2code </name>
	<code><![CDATA[EnDe.prn2code($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert printable (ASCII) character to JavaScript char code (integer of unicode)]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.chr2prn </name>
	<code><![CDATA[EnDe.chr2prn("null",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert JavaScript character to printable (ASCII) character, non-printable are \xXX]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.chr2prn </name>
	<code><![CDATA[EnDe.chr2prn("null",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[null: convert non-printable to hex (no padding, see EnDe.i2h())]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.chr2prn </name>
	<code><![CDATA[EnDe.chr2prn("3",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[3:    convert non-printable to 3-digit hex (see EnDe.i2h())]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.chr2prn </name>
	<code><![CDATA[EnDe.chr2prn("n",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[n:    convert non-printable to n-digit hex (see EnDe.i2h())]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.str2bin </name>
	<code><![CDATA[EnDe.str2bin("null",$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert string to n-bit binary string; type is number of bits]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.str2chr </name>
	<code><![CDATA[EnDe.str2chr($('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert string to list of characters with prefix, delimiter and suffix]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.str2lng </name>
	<code><![CDATA[EnDe.str2lng($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert a string to an array of long integers]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.lng2str </name>
	<code><![CDATA[EnDe.lng2str($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert an array of long integers to a string]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.z2n    </name>
	<code><![CDATA[EnDe.z2n($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert negative numbers to numbers (2^32)]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.n2z    </name>
	<code><![CDATA[EnDe.n2z($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert numbers (2^32) to negative numbers]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.z2n64  </name>
	<code><![CDATA[EnDe.z2n64($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert negative numbers to numbers (2^64)]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.n2z64  </name>
	<code><![CDATA[EnDe.n2z64($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert numbers (2^64) to negative numbers]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.h2i    </name>
	<code><![CDATA[EnDe.h2i($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert hex value (string) to integer]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.i2h    </name>
	<code><![CDATA[EnDe.i2h("null",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert integer (string) value to hex]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.i2h    </name>
	<code><![CDATA[EnDe.i2h("null",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[null: converted hex (no padding)]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.i2h    </name>
	<code><![CDATA[EnDe.i2h("hex0",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[hex0: converted hex (no padding)]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.i2h    </name>
	<code><![CDATA[EnDe.i2h("hex1",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[hex1: converted hex (no padding)]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.i2h    </name>
	<code><![CDATA[EnDe.i2h("3",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[3:    converted 3-digit hex]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.i2h    </name>
	<code><![CDATA[EnDe.i2h("n",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[n:    converted n-digit hex]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.h2c    </name>
	<code><![CDATA[EnDe.h2c($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert hex value (string) to characters]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.h2b    </name>
	<code><![CDATA[EnDe.h2b($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert hex value (string) to binary]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.b2h    </name>
	<code><![CDATA[EnDe.b2h($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert binary value (string) to hex (binary limeted to 2^53)]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.i2b    </name>
	<code><![CDATA[EnDe.i2b($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert integer (string) value to binary]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.b2i    </name>
	<code><![CDATA[EnDe.b2i($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert binary value (string) to hex (binary limeted to 2^53)]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.i2bcd  </name>
	<code><![CDATA[EnDe.i2bcd($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert digit to BCD code (4 dual digits)]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.bcd2i  </name>
	<code><![CDATA[EnDe.bcd2i($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert BCD code (4 dual digits) to digit]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.reverse </name>
	<code><![CDATA[EnDe.reverse($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[reverse characters in string (mirror sring)]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.atbash </name>
	<code><![CDATA[EnDe.atbash($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert plain text to Atbash encoding]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.a2e    </name>
	<code><![CDATA[EnDe.a2e($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert ASCII to EBCDIC characters]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.e2a    </name>
	<code><![CDATA[EnDe.e2a($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert EBCDIC to ASCII characters]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.xor    </name>
	<code><![CDATA[EnDe.xor($('EnDeDOM.EN.text').value,key)  ]]></code>
	<desc><![CDATA[XOR each character with first character from key]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.rot    </name>
	<code><![CDATA[EnDe.rot($('EnDeDOM.EN.text').value,key)  ]]></code>
	<desc><![CDATA[convert string to rot-N-encoded text (aka Caesar encoding); key is number/position of character: 1..26]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.dez2hex </name>
	<code><![CDATA[EnDe.dez2hex("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[convert decimal encoded text to hex encoded text]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.dez2hex </name>
	<code><![CDATA[EnDe.dez2hex("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[null: converted hex value without prefix]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.dez2hex </name>
	<code><![CDATA[EnDe.dez2hex("qp2","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[qp2:  converted hex value prefixed with =]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.dez2hex </name>
	<code><![CDATA[EnDe.dez2hex("url2","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[url2: converted hex value prefixed with %]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.dez2hex </name>
	<code><![CDATA[EnDe.dez2hex("url3","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[url3: converted hex value prefixed with %0]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.dez2hex </name>
	<code><![CDATA[EnDe.dez2hex("url4","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[url4: converted hex value prefixed with %00]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.dez2hex </name>
	<code><![CDATA[EnDe.dez2hex("ncr2","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[ncr2: converted hex value prefixed with &#x]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.dez2hex </name>
	<code><![CDATA[EnDe.dez2hex("ncr4","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[ncr4: converted hex value prefixed with &#x00]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.h2n    </name>
	<code><![CDATA[EnDe.h2n("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert hex value to its nibble hex values (1-byte values supported only)]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.h2n    </name>
	<code><![CDATA[EnDe.h2n("nibbles","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[nibbles: convert hex value to its nibble hex values]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.h2n    </name>
	<code><![CDATA[EnDe.h2n("nibble1","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[nibble1: convert hex value to its first nibble hex value]]></desc>
    </attack>
    <attack>
	<label>EnDe</label>
	<name>EnDe.h2n    </name>
	<code><![CDATA[EnDe.h2n("nibble2","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[nibble2: convert hex value to its second nibble hex value]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.isUCS    </name>
  	<code><![CDATA[EnDe.UCS.isUCS($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if charcter is valid code point; src is a single character]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.isUTF7   </name>
  	<code><![CDATA[EnDe.UCS.isUTF7($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if charcter is UTF-7 character; src is a single character]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.isBOM    </name>
  	<code><![CDATA[EnDe.UCS.isBOM("null",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[dispatcher to check for BOM]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.isBOM    </name>
  	<code><![CDATA[EnDe.UCS.isBOM("UTF32BE",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[UTF32BE: return true for UTF32BE BOM]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.isBOM    </name>
  	<code><![CDATA[EnDe.UCS.isBOM("UTF32LE",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[UTF32LE: return true for UTF32LE BOM]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.isBOM    </name>
  	<code><![CDATA[EnDe.UCS.isBOM("UTF16BE",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[UTF16BE: return true for UTF16BE BOM]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.isBOM    </name>
  	<code><![CDATA[EnDe.UCS.isBOM("UTF16LE",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[UTF16LE: return true for UTF16LE BOM]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.isBOM    </name>
  	<code><![CDATA[EnDe.UCS.isBOM("UTF8",$('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[UTF8   : return true for UTF8 BOM]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.getBOM   </name>
  	<code><![CDATA[EnDe.UCS.getBOM("null")  ]]></code>
	<desc><![CDATA[get (character) value for BOM]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.getBOM   </name>
  	<code><![CDATA[EnDe.UCS.getBOM("UTF32BE")  ]]></code>
	<desc><![CDATA[UTF32BE: return UTF32BE BOM bytes]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.getBOM   </name>
  	<code><![CDATA[EnDe.UCS.getBOM("UTF32LE")  ]]></code>
	<desc><![CDATA[UTF32LE: return UTF32LE BOM bytes]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.getBOM   </name>
  	<code><![CDATA[EnDe.UCS.getBOM("UTF16BE")  ]]></code>
	<desc><![CDATA[UTF16BE: return UTF16BE BOM bytes]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.getBOM   </name>
  	<code><![CDATA[EnDe.UCS.getBOM("UTF16LE")  ]]></code>
	<desc><![CDATA[UTF16LE: return UTF16LE BOM bytes]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.getBOM   </name>
  	<code><![CDATA[EnDe.UCS.getBOM("UTF8")  ]]></code>
	<desc><![CDATA[UTF8   : return UTF8 BOM bytes]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.str32BE  </name>
  	<code><![CDATA[EnDe.UCS.str32BE($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string starts with UTF-32 big-endian BOM]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.str32LE  </name>
  	<code><![CDATA[EnDe.UCS.str32LE($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string starts with UTF-32 little-endian BOM]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.str16BE  </name>
  	<code><![CDATA[EnDe.UCS.str16BE($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string starts with UTF-16 big-endian BOM]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.str16LE  </name>
  	<code><![CDATA[EnDe.UCS.str16LE($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string starts with UTF-16 little-endian BOM]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.strUTF8  </name>
  	<code><![CDATA[EnDe.UCS.strUTF8($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[return true if string starts with UTF-8 BOM]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.f2h      </name>
  	<code><![CDATA[EnDe.UCS.f2h($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert fullwidth Unicode to halfwidth Unicode characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.h2f      </name>
  	<code><![CDATA[EnDe.UCS.h2f($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert halfwidth Unicode to fullwidth Unicode characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.utf16le  </name>
  	<code><![CDATA[EnDe.UCS.utf16le($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert Unicode to UTF-16-LE characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.utf16be  </name>
  	<code><![CDATA[EnDe.UCS.utf16be($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert Unicode to UTF-16-BE characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.UCS</label>
	<name>EnDe.UCS.utf32le  </name>
  	<code><![CDATA[EnDe.UCS.utf32le($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert Unicode to UTF-32-LE characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.IDN</label>
	<name>EnDe.IDN.libidn   </name>
  	<code><![CDATA[EnDe.IDN.libidn($('EnDeDOM.EN.text').value,$('EnDeDOM.API.suffix').value)  ]]></code>
	<desc><![CDATA[check for trailing suffix and remove it]]></desc>
    </attack>
    <attack>
	<label>EnDe.IDN</label>
	<name>EnDe.IDN.str2puny </name>
  	<code><![CDATA[EnDe.IDN.str2puny($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert plain text to punycode]]></desc>
    </attack>
    <attack>
	<label>EnDe.IDN</label>
	<name>EnDe.IDN.str2idn  </name>
  	<code><![CDATA[EnDe.IDN.str2idn($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert plain text to IDN/punycode]]></desc>
    </attack>
    <attack>
	<label>EnDe.IDN</label>
	<name>EnDe.IDN.puny2str </name>
  	<code><![CDATA[EnDe.IDN.puny2str($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert punycode to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.IDN</label>
	<name>EnDe.IDN.idn2str  </name>
  	<code><![CDATA[EnDe.IDN.idn2str($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert IDN/punycode plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.chr      </name>
  	<code><![CDATA[EnDe.EN.chr(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert string to list of characters with prefix, delimiter and suffix]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.hex      </name>
  	<code><![CDATA[EnDe.EN.hex("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert plain text to hex encoded text]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.hex      </name>
  	<code><![CDATA[EnDe.EN.hex("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[null: converted hex value without prefix and no padding]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.hex      </name>
  	<code><![CDATA[EnDe.EN.hex("qp2","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[qp2:  converted hex value prefixed with =]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.hex      </name>
  	<code><![CDATA[EnDe.EN.hex("hex0","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[hex0: converted hex value (no padding)]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.hex      </name>
  	<code><![CDATA[EnDe.EN.hex("hex1","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[hex1: converted hex value (no padding)]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.hex      </name>
  	<code><![CDATA[EnDe.EN.hex("2","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[2:    converted 2-digit hex]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.hex      </name>
  	<code><![CDATA[EnDe.EN.hex("3","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[3:    converted 3-digit hex]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.hex      </name>
  	<code><![CDATA[EnDe.EN.hex("n","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[n:    converted n-digit hex]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.hex      </name>
  	<code><![CDATA[EnDe.EN.hex("url2","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[url2: converted hex value prefixed with %]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.hex      </name>
  	<code><![CDATA[EnDe.EN.hex("url3","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[url3: converted hex value prefixed with %0]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.hex      </name>
  	<code><![CDATA[EnDe.EN.hex("url4","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[url4: converted hex value prefixed with %00]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.hex      </name>
  	<code><![CDATA[EnDe.EN.hex("urlc","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[urlc: set high bit in hex encoding (results in %c0 prefix)]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.hex      </name>
  	<code><![CDATA[EnDe.EN.hex("ncr2","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[ncr2: converted hex value prefixed with &#x]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.hex      </name>
  	<code><![CDATA[EnDe.EN.hex("ncr4","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[ncr4: converted hex value prefixed with &#x00]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.hex      </name>
  	<code><![CDATA[EnDe.EN.hex("nibbles","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[nibbles: convert hex value to its nibble hex values]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.hex      </name>
  	<code><![CDATA[EnDe.EN.hex("nibble1","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[nibble1: convert hex value to its first nibble hex value]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.hex      </name>
  	<code><![CDATA[EnDe.EN.hex("nibble2","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[nibble2: convert hex value to its second nibble hex value]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert plain text to URL encoded text]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[null: converted URL (hex) value without prefix and no padding]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("qp2","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[qp2:  converted URL (hex) value prefixed with =]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("hex0","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[hex0: converted URL (hex) value (no padding)]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("hex1","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[hex1: converted URL (hex) value (no padding)]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("3","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[3:    converted 3-digit URL (hex)]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("n","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[n:    converted n-digit URL (hex)]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("url2","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[url2: converted URL (hex) value prefixed with %]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("url3","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[url3: converted URL (hex) value prefixed with %0]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("url4","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[url4: converted URL (hex) value prefixed with %00]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("urlc","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[urlc: set high bit in URL (hex) encoding (results in %c0 prefix)]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("ncr2","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[ncr2: converted URL (hex) value prefixed with &#x]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("ncr4","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[ncr4: converted URL (hex) value prefixed with &#x00]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("ucs","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[ucs:  converted URL (hex) value prefixed with % (hex values for Unicode character)]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("utf8","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[utf8: converted URL (hex) value prefixed with % (hex values for UTF-8 character)]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("utf8c","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[utf8c: set high bit in URL (hex) encoding (results in %c0 prefix)]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("nibbles","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[nibbles: convert URL (hex) value to its nibble hex values]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("nibble1","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[nibble1: convert URL (hex) value to its first nibble hex value]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.url      </name>
  	<code><![CDATA[EnDe.EN.url("nibble2","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[nibble2: convert URL (hex) value to its second nibble hex value]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.dez      </name>
  	<code><![CDATA[EnDe.EN.dez("null","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert plain text to decimal encoded text]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.dez      </name>
  	<code><![CDATA[EnDe.EN.dez("null","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[null: converted decimal value with variable length (2-3 digits)]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.dez      </name>
  	<code><![CDATA[EnDe.EN.dez("ncr2","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[ncr2: converted decimal value prefixed with &#x]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.dez      </name>
  	<code><![CDATA[EnDe.EN.dez("3","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[3:    converted 3-digit decimal]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.dez      </name>
  	<code><![CDATA[EnDe.EN.dez("n","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[n:    converted n-digit decimal]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.oct      </name>
  	<code><![CDATA[EnDe.EN.oct("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert plain text to octal encoded text]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.oct      </name>
  	<code><![CDATA[EnDe.EN.oct("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[null: converted octal value with variable length (2-3 digits)]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.oct      </name>
  	<code><![CDATA[EnDe.EN.oct("3","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[3:    converted 3-digit octal]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.oct      </name>
  	<code><![CDATA[EnDe.EN.oct("n","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[n:    converted n-digit octal]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.bin      </name>
  	<code><![CDATA[EnDe.EN.bin("null","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert string to n-bit binary string]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.bin      </name>
  	<code><![CDATA[EnDe.EN.bin("6","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[6:    converted 6-digit binary]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.bin      </name>
  	<code><![CDATA[EnDe.EN.bin("7","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[7:    converted 7-digit binary]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.bin      </name>
  	<code><![CDATA[EnDe.EN.bin("8","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[8:    converted 8-digit binary]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.bcd      </name>
  	<code><![CDATA[EnDe.EN.bcd(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert numbers in text to BCD coded numbers]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.aiken    </name>
  	<code><![CDATA[EnDe.EN.aiken(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert numbers in text to Aiken coded numbers]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.stibitz  </name>
  	<code><![CDATA[EnDe.EN.stibitz(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert numbers in text to Stibitz coded numbers]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.cp   </name>
  	<code><![CDATA[EnDe.EN.cp($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert all characters from unicode base to Windows CP-1252 characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.dta  </name>
  	<code><![CDATA[EnDe.EN.dta($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[convert all characters from ASCII to DIN66003 characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.ucs      </name>
  	<code><![CDATA[EnDe.EN.ucs("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert plain text to Unicode UCS-2 encoded text]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.ucs      </name>
  	<code><![CDATA[EnDe.EN.ucs("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[null: converted Unicode without prefix]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.ucs      </name>
  	<code><![CDATA[EnDe.EN.ucs("url4","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[url4: converted Unicode prefixed %u]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.ucs      </name>
  	<code><![CDATA[EnDe.EN.ucs("ucs4","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[ucs4: converted Unicode prefixed \u]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.ucs      </name>
  	<code><![CDATA[EnDe.EN.ucs("IE4","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[IE4:  converted Unicode prefixed \u]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.utf7     </name>
  	<code><![CDATA[EnDe.EN.utf7("null",_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert plain text to UTF-7 encoded text]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.utf7     </name>
  	<code><![CDATA[EnDe.EN.utf7("null",_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[null: convert UTF-7 unsave characters only]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.utf7     </name>
  	<code><![CDATA[EnDe.EN.utf7("all",_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[all:  convert all characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.utf      </name>
  	<code><![CDATA[EnDe.EN.utf(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[dispatcher/wrapper for EnDe.UCS.* calls]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.utf16le  </name>
  	<code><![CDATA[EnDe.EN.utf16le(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[wrapper for EnDe.UCS.utf16le]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.utf16be  </name>
  	<code><![CDATA[EnDe.EN.utf16be(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[wrapper for EnDe.UCS.utf16be]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.utf16    </name>
  	<code><![CDATA[EnDe.EN.utf16(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[wrapper for EnDe.UCS.utf16be]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.utf32le  </name>
  	<code><![CDATA[EnDe.EN.utf32le(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[wrapper for EnDe.UCS.utf32le]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.utf32be  </name>
  	<code><![CDATA[EnDe.EN.utf32be(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[wrapper for EnDe.UCS.utf32be]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.utf8bom  </name>
  	<code><![CDATA[EnDe.EN.utf8bom(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert plain text to UTF-8 encoded text with BOM]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.utf8     </name>
  	<code><![CDATA[EnDe.EN.utf8(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert plain text to UTF-8 encoded text]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.f2h      </name>
  	<code><![CDATA[EnDe.EN.f2h(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert fullwidth Unicode to halfwidth Unicode characters; wrapper for EnDe.UCS.f2h()]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.h2f      </name>
  	<code><![CDATA[EnDe.EN.h2f("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert halfwidth Unicode to fullwidth Unicode characters (UTF-16, 2 bytes)]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.h2f      </name>
  	<code><![CDATA[EnDe.EN.h2f("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[null: converted fullwidth Unicode characters are UTF-16, 2 bytes]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.h2f      </name>
  	<code><![CDATA[EnDe.EN.h2f("utf8","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[utf8: converted fullwidth Unicode characters are UTF-8, 3 bytes]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.ncr      </name>
  	<code><![CDATA[EnDe.EN.ncr("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert plain text to named/numbered HTML-Entity]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.ncr      </name>
  	<code><![CDATA[EnDe.EN.ncr("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[null: assume standard character map; using HTML named Entities]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.ncr      </name>
  	<code><![CDATA[EnDe.EN.ncr("name","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[name: assume standard character map; using HTML named Entities]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.ncr      </name>
  	<code><![CDATA[EnDe.EN.ncr("css","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[css:  assume standard character map; using HTML hex numberd Entities]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.ncr      </name>
  	<code><![CDATA[EnDe.EN.ncr("dez","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[dez:  assume standard character map; using HTML decimal numberd Entities]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.ncr      </name>
  	<code><![CDATA[EnDe.EN.ncr("winf","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[winf: assume force convertion as from Windows CP-1252 character map]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.ncr      </name>
  	<code><![CDATA[EnDe.EN.ncr("win","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[win:  assume Windows CP-1252 character map]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.toCode   </name>
  	<code><![CDATA[EnDe.EN.toCode(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[wrapper for EnDe.chr2code()]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.fromCode </name>
  	<code><![CDATA[EnDe.EN.fromCode(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[wrapper for EnDe.code2chr()]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.fromJava </name>
  	<code><![CDATA[EnDe.EN.fromJava(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[wrapper for EnDe.java2chr()]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.xml      </name>
  	<code><![CDATA[EnDe.EN.xml(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert plain text to XML-escaped text]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.esc      </name>
  	<code><![CDATA[EnDe.EN.esc("null",_n2_,$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert plain text to escaped text]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.esc      </name>
  	<code><![CDATA[EnDe.EN.esc("escCSS",_n2_,$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[escCSS:  use CSS hex numbered entities]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.esc      </name>
  	<code><![CDATA[EnDe.EN.esc("escHTML",_n2_,$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[escHTML: use HTML named Entities]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.esc      </name>
  	<code><![CDATA[EnDe.EN.esc("escURL",_n2_,$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[escURL:  use URL encoding]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.esc      </name>
  	<code><![CDATA[EnDe.EN.esc("escJS",_n2_,$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[escJS:   use \-escaped \ and " and ']]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.esc      </name>
  	<code><![CDATA[EnDe.EN.esc("escSQL",_n2_,$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[escSQL:  use '' for ']]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.esc      </name>
  	<code><![CDATA[EnDe.EN.esc("escQuote",_n2_,$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[escQuote:  use URL encoding]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.esc      </name>
  	<code><![CDATA[EnDe.EN.esc("escXML",_n2_,$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[escXML:  use XML named Entities]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.esc      </name>
  	<code><![CDATA[EnDe.EN.esc("escJava",_n2_,$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[escJava: use \-escaped " and \uHHHH for other non-US-ASCII]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.uu_DoesNotWork       </name>
  	<code><![CDATA[EnDe.EN.uu_DoesNotWork($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[**trash**]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.uu       </name>
  	<code><![CDATA[EnDe.EN.uu("null","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert plain text to UUencode text; delimiter is the padding character]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.uu       </name>
  	<code><![CDATA[EnDe.EN.uu("null","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[null:]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.uu       </name>
  	<code><![CDATA[EnDe.EN.uu("raw","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[raw:  convert UUencode without prefix and suffix]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.uu       </name>
  	<code><![CDATA[EnDe.EN.uu("all","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[all:  convert all characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.qp       </name>
  	<code><![CDATA[EnDe.EN.qp("null","lazy",_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert plain text to quoted printable text]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.qp       </name>
  	<code><![CDATA[EnDe.EN.qp("null","lazy",_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[null: convert all characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.qp       </name>
  	<code><![CDATA[EnDe.EN.qp("raw","lazy",_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[raw:  do not convert \n and \r characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.idn      </name>
  	<code><![CDATA[EnDe.EN.idn("null",_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[convert string to punycode or IDNA-punycode]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.idn      </name>
  	<code><![CDATA[EnDe.EN.idn("IDN",_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[IDN:  convert URI only]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.idn      </name>
  	<code><![CDATA[EnDe.EN.idn("PNY",_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[PNY:  convert FQDN only (strip off leading schema and trailing search parameter)]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.idn      </name>
  	<code><![CDATA[EnDe.EN.idn("PNY_",_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[PNY_: convert complete string]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.idn      </name>
  	<code><![CDATA[EnDe.EN.idn("IDN_",_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[IDN_: convert complete string]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.a2e      </name>
  	<code><![CDATA[EnDe.EN.a2e(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert ASCII to EBCDIC characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.e2a      </name>
  	<code><![CDATA[EnDe.EN.e2a(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert EBCDIC to ASCII characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.rot      </name>
  	<code><![CDATA[EnDe.EN.rot(_n1_,_n2_,_n3_,$('EnDeDOM.EN.text').value,_n5_,key,_n7_)   ]]></code>
	<desc><![CDATA[convert string to rot-N-encoded text (aka Caesar encoding)]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.sos      </name>
  	<code><![CDATA[EnDe.EN.sos(_n1_,"lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert to morse characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.baudot   </name>
  	<code><![CDATA[EnDe.EN.baudot(_n1_,"lazy",_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert to Baudot characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.braille  </name>
  	<code><![CDATA[EnDe.EN.braille("null","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert to Braille characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.braille  </name>
  	<code><![CDATA[EnDe.EN.braille("ASCIIBr","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[ASCIIBr:  use ASCII-Braille symbols]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.braille  </name>
  	<code><![CDATA[EnDe.EN.braille("dotBr","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[dotBr:    use dot-Braille symbols]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.braille  </name>
  	<code><![CDATA[EnDe.EN.braille("NumBr","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[NumBr:    use number symbols]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.braille  </name>
  	<code><![CDATA[EnDe.EN.braille("DadaUrka","lazy",_n3_,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[DadaUrka: use Dada Urka symbols]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.blade    </name>
  	<code><![CDATA[EnDe.EN.blade("null","lazy",_n3_,$('EnDeDOM.EN.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert digits to Blade (ASCII) symbols]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.dmp      </name>
  	<code><![CDATA[EnDe.EN.dmp("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert to traditional xdump style: hex values left, characters right]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.odx      </name>
  	<code><![CDATA[EnDe.EN.odx("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert to traditional "od -x" style: double hex values with space as delimiter]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.odx      </name>
  	<code><![CDATA[EnDe.EN.odx("ODx","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[ODx: od -x style big endian]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.odx      </name>
  	<code><![CDATA[EnDe.EN.odx("xOD","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[xOD: od -x style little endian]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.crc      </name>
  	<code><![CDATA[EnDe.EN.crc("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,iv,mask,polynom)  ]]></code>
	<desc><![CDATA[wrapper for CRC functions]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.md4      </name>
  	<code><![CDATA[EnDe.EN.md4("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,key,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[wrapper for str_md4()]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.md5      </name>
  	<code><![CDATA[EnDe.EN.md5("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,key,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[wrapper for str_md5()]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.sha      </name>
  	<code><![CDATA[EnDe.EN.sha("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,key,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[wrapper for sha1()]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.sha256   </name>
  	<code><![CDATA[EnDe.EN.sha256("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,key,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[wrapper for sha2()]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.sha384   </name>
  	<code><![CDATA[EnDe.EN.sha384("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,key,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[wrapper for sha384()]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.sha512   </name>
  	<code><![CDATA[EnDe.EN.sha512("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,key,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[wrapper for sha512()]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.blowfish </name>
  	<code><![CDATA[EnDe.EN.blowfish("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,key,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[wrapper for blowfish()]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.aes      </name>
  	<code><![CDATA[EnDe.EN.aes("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,key,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[wrapper for AES(); uppercase parameter is escCtl (see aes.js)]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.rmd      </name>
  	<code><![CDATA[EnDe.EN.rmd("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,_n5_,key,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[wrapper for gen_otp_rmd160(); delimiter is the number of iterations]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.tea      </name>
  	<code><![CDATA[EnDe.EN.tea("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,key,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[encrypt a string using the Block Tiny Encryption Algorithm]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.yenc     </name>
  	<code><![CDATA[EnDe.EN.yenc("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,key,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[yEncode]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.rsaz     </name>
  	<code><![CDATA[EnDe.EN.rsaz("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,key,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[**not yet implemented**]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.guess    </name>
  	<code><![CDATA[EnDe.EN.guess(_n1_,"lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[**depricated**]]></desc>
    </attack>
    <attack>
	<label>EnDe.EN</label>
	<name>EnDe.EN.dispatch </name>
  	<code><![CDATA[EnDe.EN.dispatch("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.EN.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[dispatcher for encoding functions]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.chr      </name>
  	<code><![CDATA[EnDe.DE.chr(_n1_,_n2_,_n3_,$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert string to list of characters with prefix, delimiter and suffix]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.url      </name>
  	<code><![CDATA[EnDe.DE.url("null","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert URL encoded text to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.url      </name>
  	<code><![CDATA[EnDe.DE.url("null","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[null: just convert each %HH value]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.url      </name>
  	<code><![CDATA[EnDe.DE.url("utf8","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[utf8: convert each %HH value, then convert UTF-8 characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.url      </name>
  	<code><![CDATA[EnDe.DE.url("utf8c","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[utf8c: convert each %HH value, then convert UTF-8 characters (with high bit set)]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.ucs      </name>
  	<code><![CDATA[EnDe.DE.ucs("null","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert URL encoded (none US ASCII Unicode) text to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.ucs      </name>
  	<code><![CDATA[EnDe.DE.ucs("url2","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[url2: convert %HH%HH strings]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.ucs      </name>
  	<code><![CDATA[EnDe.DE.ucs("url4","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[url4: convert %uHHHH strings (see EnDe.DE.num('hex',...) also)]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.ucs      </name>
  	<code><![CDATA[EnDe.DE.ucs("ucs4","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[ucs4: convert \uHHHH strings]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.num      </name>
  	<code><![CDATA[EnDe.DE.num("null","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value,len)  ]]></code>
	<desc><![CDATA[convert numeric encoded text to plain text; internal function, don't use in API]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.numstr   </name>
  	<code><![CDATA[EnDe.DE.numstr("null","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert hex, decimal or octal encoded text to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.hex      </name>
  	<code><![CDATA[EnDe.DE.hex("null","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert hex-based encoded text to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.dez      </name>
  	<code><![CDATA[EnDe.DE.dez("null","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert decimal-based encoded text to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.oct      </name>
  	<code><![CDATA[EnDe.DE.oct("null","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert octal-based encoded text to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.bin      </name>
  	<code><![CDATA[EnDe.DE.bin("null","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert binary-based encoded text to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.bcd      </name>
  	<code><![CDATA[EnDe.DE.bcd(_n1_,_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert BCD coded numbers to digits]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.aiken    </name>
  	<code><![CDATA[EnDe.DE.aiken(_n1_,_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert Aiken coded numbers in text to digits]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.stibitz  </name>
  	<code><![CDATA[EnDe.DE.stibitz(_n1_,_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert Stibitz coded numbers in text to digits]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.cp   </name>
  	<code><![CDATA[EnDe.DE.cp($('EnDeDOM.DE.text').value)  ]]></code>
	<desc><![CDATA[convert all characters from Windows CP-1252 to unicode base characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.dta  </name>
  	<code><![CDATA[EnDe.DE.dta($('EnDeDOM.DE.text').value)  ]]></code>
	<desc><![CDATA[convert all characters from DIN66003 to ASCII characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.utf7     </name>
  	<code><![CDATA[EnDe.DE.utf7(_n1_,_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert UTF-7 encoded text to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.utf8     </name>
  	<code><![CDATA[EnDe.DE.utf8(_n1_,_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert UTF-8 encoded text to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.f2h      </name>
  	<code><![CDATA[EnDe.DE.f2h(_n1_,_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert fullwidth Unicode to halfwidth Unicode characters; wrapper for EnDe.UCS.f2h()]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.h2f      </name>
  	<code><![CDATA[EnDe.DE.h2f(_n1_,_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert halfwidth Unicode to fullwidth Unicode characters; wrapper for EnDe.UCS.h2f()]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.ncr      </name>
  	<code><![CDATA[EnDe.DE.ncr("null","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert named HTML-Entity to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.toCode   </name>
  	<code><![CDATA[EnDe.DE.toCode("null","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[wrapper for EnDe.chr2code()]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.fromCode </name>
  	<code><![CDATA[EnDe.DE.fromCode("null","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[wrapper for EnDe.code2chr()]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.fromJava </name>
  	<code><![CDATA[EnDe.DE.fromJava("null","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[wrapper for EnDe.java2chr()]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.xml      </name>
  	<code><![CDATA[EnDe.DE.xml(_n1_,_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert XML encoded text to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.esc      </name>
  	<code><![CDATA[EnDe.DE.esc("null",_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert enscaped text to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.esc      </name>
  	<code><![CDATA[EnDe.DE.esc("escCSS",_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[escCSS:  expect CSS hex numbered entities]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.esc      </name>
  	<code><![CDATA[EnDe.DE.esc("escHTML",_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[escHTML: expect HTML named Entities]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.esc      </name>
  	<code><![CDATA[EnDe.DE.esc("escURL",_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[escURL:  expect URL encoding]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.esc      </name>
  	<code><![CDATA[EnDe.DE.esc("escJS",_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[escJS:   expect JavaScript escaping]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.esc      </name>
  	<code><![CDATA[EnDe.DE.esc("escSQL",_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[escSQL:  convert '' to ']]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.esc      </name>
  	<code><![CDATA[EnDe.DE.esc("escXML",_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[escXML:  expect XML named Entities]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.esc      </name>
  	<code><![CDATA[EnDe.DE.esc("escQuote",_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[escQuote: convert \' and \" to ' "]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.esc      </name>
  	<code><![CDATA[EnDe.DE.esc("escJava",_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[escJava: expect Java escaping]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.uu       </name>
  	<code><![CDATA[EnDe.DE.uu("null","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert UUencode text to plain text; delimiter is the padding character]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.uu       </name>
  	<code><![CDATA[EnDe.DE.uu("hist","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[hist:]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.uu       </name>
  	<code><![CDATA[EnDe.DE.uu("raw","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[raw:]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.uu       </name>
  	<code><![CDATA[EnDe.DE.uu("user","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[user:]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.qp       </name>
  	<code><![CDATA[EnDe.DE.qp(_n1_,"lazy",$('EnDeDOM.DE.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert quoted printable text to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.idn      </name>
  	<code><![CDATA[EnDe.DE.idn("null",_n3_,$('EnDeDOM.DE.text').value,_n5_,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[convert punycode or IDNA-punycode to string]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.idn      </name>
  	<code><![CDATA[EnDe.DE.idn("IDN",_n3_,$('EnDeDOM.DE.text').value,_n5_,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[IDN:  convert URI only]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.idn      </name>
  	<code><![CDATA[EnDe.DE.idn("PNY",_n3_,$('EnDeDOM.DE.text').value,_n5_,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[PNY:  convert FQDN only (strip off leading schema and trailing search parameter)]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.idn      </name>
  	<code><![CDATA[EnDe.DE.idn("PNY_",_n3_,$('EnDeDOM.DE.text').value,_n5_,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[PNY_: convert complete string]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.idn      </name>
  	<code><![CDATA[EnDe.DE.idn("IDN_",_n3_,$('EnDeDOM.DE.text').value,_n5_,$('EnDeDOM.API.suffix').value,_n7_)  ]]></code>
	<desc><![CDATA[IDN_: convert complete string]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.a2e      </name>
  	<code><![CDATA[EnDe.DE.a2e(_n1_,_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert ASCII to EBCDIC characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.e2a      </name>
  	<code><![CDATA[EnDe.DE.e2a(_n1_,_n2_,$('EnDeDOM.DE.text').value,_n5_,_n6_,_n7_)  ]]></code>
	<desc><![CDATA[convert EBCDIC to ASCII characters]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.rot      </name>
  	<code><![CDATA[EnDe.DE.rot(_n1_,_n2_,$('EnDeDOM.DE.text').value,_n5_,key,_n7_)   ]]></code>
	<desc><![CDATA[convert string to rot-N-encoded text (aka Caesar encoding)]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.sos      </name>
  	<code><![CDATA[EnDe.DE.sos("null","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert morse characters to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.baudot   </name>
  	<code><![CDATA[EnDe.DE.baudot("null","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert Baudot characters to plain text]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.dmp      </name>
  	<code><![CDATA[EnDe.DE.dmp("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[convert from traditional xdump or od style: (hex values left only)]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.dmp      </name>
  	<code><![CDATA[EnDe.DE.dmp("hex","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[hex: 'xdump' style input (space seperated hex values left, strings right)]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.dmp      </name>
  	<code><![CDATA[EnDe.DE.dmp("ODx","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[ODx: 'od -x' style input (count, 2- or 4-byte hex values)]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.dmp      </name>
  	<code><![CDATA[EnDe.DE.dmp("xDO","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[xDO: 'od -x' style input (count, 4-byte hex values little endian)]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.blowfish </name>
  	<code><![CDATA[EnDe.DE.blowfish("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,key,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[wrapper for blowfish()]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.aes      </name>
  	<code><![CDATA[EnDe.DE.aes("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,key,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[wrapper for AES(); uppercase parameter is escCtl (see aes.js)]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.tea      </name>
  	<code><![CDATA[EnDe.DE.tea("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,key,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[decrypt a string using the Block Tiny Encryption Algorithm]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.yenc     </name>
  	<code><![CDATA[EnDe.DE.yenc("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,key,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[yDecode]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.fuzzy    </name>
  	<code><![CDATA[EnDe.DE.fuzzy("null","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[fuzzy decoding ..]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.fuzzy    </name>
  	<code><![CDATA[EnDe.DE.fuzzy("fuzOCTsq","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[fuzOCTsq: decode octal inside single quotes]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.fuzzy    </name>
  	<code><![CDATA[EnDe.DE.fuzzy("fuzOCTdq","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[fuzOCTdq: decode octal inside double quotes]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.fuzzy    </name>
  	<code><![CDATA[EnDe.DE.fuzzy("fuzHEXsq","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[fuzHEXsq: decode hex inside single quotes]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.fuzzy    </name>
  	<code><![CDATA[EnDe.DE.fuzzy("fuzHEXdq","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[fuzHEXdq: decode hex inside double quotes]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.fuzzy    </name>
  	<code><![CDATA[EnDe.DE.fuzzy("fuzUCSsq","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[fuzUCSsq: decode Unicode inside single quotes]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.fuzzy    </name>
  	<code><![CDATA[EnDe.DE.fuzzy("fuzUCSdq","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[fuzUCSdq: decode Unicode inside double quotes]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.fuzzy    </name>
  	<code><![CDATA[EnDe.DE.fuzzy("...","lazy",$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[...]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.guess    </name>
  	<code><![CDATA[EnDe.DE.guess(_n1_,"lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[**depricated**]]></desc>
    </attack>
    <attack>
	<label>EnDe.DE</label>
	<name>EnDe.DE.dispatch </name>
  	<code><![CDATA[EnDe.DE.dispatch("null","lazy",$('EnDeDOM.API.uppercase').checked,$('EnDeDOM.DE.text').value,$('EnDeDOM.API.prefix').value,$('EnDeDOM.API.suffix').value,$('EnDeDOM.API.delimiter').value)  ]]></code>
	<desc><![CDATA[dispatcher for decoding functions]]></desc>
    </attack>
    <attack>
	<label></label>
	<name>.rfc2396    </name>
	<code><![CDATA[.rfc2396()  ]]></code>
	<desc><![CDATA[container for RFC2396 definitions ** NOT YET USED **]]></desc>
    </attack>
    <attack>
	<label></label>
	<name>.encode   </name>
  	<code><![CDATA[.encode($('EnDeDOM.EN.text').value,$('EnDeDOM.API.uppercase').checked)  ]]></code>
	<desc><![CDATA[encode string according RFC 2396]]></desc>
    </attack>
    <attack>
	<label></label>
	<name>.additionalBase64Encoding </name>
	<code><![CDATA[.additionalBase64Encoding($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[additional Base64 character encoding ** NOT YET USED **]]></desc>
    </attack>
    <attack>
	<label></label>
	<name>.additionalBase64Decoding </name>
	<code><![CDATA[.additionalBase64Decoding($('EnDeDOM.EN.text').value)  ]]></code>
	<desc><![CDATA[additional Base64 character decoding ** NOT YET USED **]]></desc>
    </attack>
